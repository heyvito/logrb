(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[888],{8679:function(s,n,a){"use strict";var e=a(9864),p={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},l={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},c={};function r(s){return e.isMemo(s)?l:c[s.$$typeof]||p}c[e.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},c[e.Memo]=l;var o=Object.defineProperty,i=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,m=Object.prototype;s.exports=function s(n,a,e){if("string"!==typeof a){if(m){var p=f(a);p&&p!==m&&s(n,p,e)}var l=i(a);u&&(l=l.concat(u(a)));for(var c=r(n),g=r(a),h=0;h<l.length;++h){var b=l[h];if(!t[b]&&(!e||!e[b])&&(!g||!g[b])&&(!c||!c[b])){var v=d(a,b);try{o(n,b,v)}catch(y){}}}}return n}},9541:function(s,n,a){"use strict";a.d(n,{r:function(){return i}});var e=a(9163),p=a(992),t=(0,e.iv)(["",";color:#FFFFFF;cursor:pointer;text-decoration:none;"],(0,p.d)({weight:500})),l=e.ZP.a.withConfig({displayName:"link__DottedLink",componentId:"sc-15b9z1q-0"})(["",";border-bottom:white 1px dotted;"],t),c=e.ZP.a.withConfig({displayName:"link__DashedLink",componentId:"sc-15b9z1q-1"})(["",";border-bottom:white 1px dashed;"],t),r=a(1664),o=a(5893),i=function(s){var n=s.text,a=s.href,e="dotted"===s.kind?(0,o.jsx)(l,{children:n}):(0,o.jsx)(c,{children:n});return 0===a.indexOf("http")?(0,o.jsx)(c,{href:a,rel:"noreferrer",target:"_blank",children:n}):(0,o.jsx)(r.default,{href:a,children:e})}},1197:function(s,n,a){"use strict";a.d(n,{Po:function(){return S},su:function(){return b},L:function(){return m},yv:function(){return x},Y4:function(){return w},op:function(){return h},e5:function(){return k},qT:function(){return A},i8:function(){return C}});var e=a(2809),p=a(1508),t=JSON.parse('{"modules":[],"classes":[{"type":"class","name":"Logrb","doc":{"type":"class","contents":[{"type":"text_block","contents":"Logrb provides a facility for working with logs in text and json formats.\\nAll instances share a single mutex to ensure logging consistency.\\nThe following attributes are available:"},{"type":"field_block","contents":{"fields":{"type":"text_block","contents":"A hash containing metadata to be included in logs emitted by this instance."},"level":{"type":"text_block","contents":[{"type":"span","contents":"The level filter for the instance. Valid values are "},{"type":"sym_ref","contents":":error"},{"type":"span","contents":", "},{"type":"sym_ref","contents":":fatal"},{"type":"span","contents":", "},{"type":"sym_ref","contents":":info"},{"type":"span","contents":", "},{"type":"sym_ref","contents":":warn"},{"type":"span","contents":", and "},{"type":"sym_ref","contents":":debug"}]},"format":{"type":"text_block","contents":[{"type":"span","contents":"The format to output logs. Supports "},{"type":"sym_ref","contents":":text"},{"type":"span","contents":" and "},{"type":"sym_ref","contents":":json"},{"type":"span","contents":"."}]}}},{"type":"text_block","contents":"Each instance exposes the following methods, which accepts an arbitrary\\nnumber of key-value pairs to be included in the logged message:"},{"type":"text_block","contents":[{"type":"ref","ref_type":"method","name":"error","target":null,"class_path":null,"contents":"#error(msg, error=nil, **fields)","ref_path":["Logrb","error"]},{"type":"span","contents":": Outputs an error entry. When <code>error</code> is present, attempts to obtain backtrace information and also includes it to the emitted entry."}]},{"type":"text_block","contents":[{"type":"ref","ref_type":"method","name":"fatal","target":null,"class_path":null,"contents":"#fatal(msg, **fields)","ref_path":["Logrb","fatal"]},{"type":"span","contents":": Outputs a fatal entry. Calling fatal causes the current process to exit with a status 1."}]},{"type":"text_block","contents":[{"type":"ref","ref_type":"method","name":"warn","target":null,"class_path":null,"contents":"#warn(msg, **fields)"},{"type":"span","contents":": Outputs a warning entry."},{"type":"ref","ref_type":"method","name":"info","target":null,"class_path":null,"contents":"#info(msg, **fields)"},{"type":"span","contents":": Outputs a informational entry."},{"type":"ref","ref_type":"method","name":"debug","target":null,"class_path":null,"contents":"#debug(msg, **fields)"},{"type":"span","contents":": Outputs a debug entry."},{"type":"ref","ref_type":"method","name":"dump","target":null,"class_path":null,"contents":"#dump(msg, data=nil)","ref_path":["Logrb","dump"]},{"type":"span","contents":": Outputs a given String or Array of bytes using the same format as <code>hexdump -C</code>."}]}]},"defined_by":[{"filename":"/tmp/logrb/lib/logrb.rb","start_at":32,"end_at":283,"source":"class Logrb\\n  attr_accessor :fields, :level, :format\\n\\n  COLORS = {\\n    error: 31,\\n    fatal: 31,\\n    unknown: 0,\\n    info: 36,\\n    warn: 33,\\n    debug: 30,\\n    reset: 0,\\n    dump: 37\\n  }.freeze\\n\\n  BACKGROUNDS = {\\n    debug: 107\\n  }.freeze\\n\\n  LEVELS = {\\n    error: 4,\\n    fatal: 4,\\n    unknown: 4,\\n    warn: 3,\\n    info: 2,\\n    debug: 1,\\n    reset: 1\\n  }.freeze\\n\\n  # Internal: A mutex instance used for synchronizing the usage of the output\\n  # IO.\\n  def self.mutex\\n    @mutex ||= Mutex.new\\n  end\\n\\n  # Initializes a new Logger instance that outputs logs to a provided output.\\n  #\\n  # output - an IO-like object that implements a #write method.\\n  # format - Optional. Indicates the format used to output log entries.\\n  #          Supports :text (default) and :json.\\n  # level  - Level to filter this logger instance\\n  # fields - Fields to include in emitted entries\\n  def initialize(output, format: :text, level: :debug, **fields)\\n    @output = output\\n    @format = format\\n    @fields = fields\\n    @level = level\\n  end\\n\\n  # Returns a new logger instance using the same output of its parent\'s, with\\n  # an optional set of fields to be merged against the parent\'s fields.\\n  #\\n  # fields - A Hash containing metadata to be included in all output entries\\n  #          emitted from the returned instance.\\n  def with_fields(**fields)\\n    inst = Logrb.new(@output, format: @format, level: @level)\\n    inst.fields = @fields.merge(fields)\\n    inst\\n  end\\n\\n  LEVELS.except(:error, :fatal).each_key do |name|\\n    define_method(name) do |msg, **fields|\\n      return if LEVELS[@level] > LEVELS[name]\\n\\n      wrap(name, msg, nil, fields)\\n      nil\\n    end\\n  end\\n\\n  # Public: Emits an error to the log output. When error is provided, this\\n  # method attempts to gather a stacktrace to include in the emitted entry.\\n  def error(msg, error = nil, **fields)\\n    return if LEVELS[@level] > LEVELS[:error]\\n\\n    wrap(:error, msg, error, fields)\\n    nil\\n  end\\n\\n  # Public: Emits a fatal message to the log output, and invokes Kernel#exit\\n  # with a non-zero status code. When error is provided, this method attempts\\n  # to gather a stacktrace to include in the emitted entry. This log entry\\n  # cannot be filtered, and is always emitted.\\n  def fatal(msg, error = nil, **fields)\\n    wrap(:fatal, msg, error, fields)\\n    exit 1\\n  end\\n\\n  # Public: Dumps a given String or Array in the same format as `hexdump -C`.\\n  def dump(log, data = nil, **fields)\\n    return if LEVELS[@level] > LEVELS[:debug]\\n\\n    if data.nil?\\n      data = log\\n      log = nil\\n    end\\n\\n    data = data.pack(\\"C*\\") if data.is_a? Array\\n    dump = []\\n    padding = @format == :json ? \\"\\" : \\"        \\"\\n    Hexdump.dump(data, output: dump)\\n    dump.map! { |line| \\"#{padding}#{line.chomp}\\" }\\n    dump = dump.join(\\"\\\\n\\")\\n\\n    if @format == :json\\n      fields[:dump] = dump\\n      dump = nil\\n    end\\n    wrap(:dump, log || \\"\\", nil, fields)\\n    write_output(\\"#{dump}\\\\n\\\\n\\") unless dump.nil?\\n  end\\n\\n  private\\n\\n  # Internal: Formats a given text using the ANSI escape sequences. Notice\\n  # that this method does not attempt to determine whether the current output\\n  # supports escape sequences.\\n  def color(color, text)\\n    bg = BACKGROUNDS[color]\\n    reset_bg = \\"\\"\\n    if bg\\n      bg = \\"\\\\e[#{bg}m\\"\\n      reset_bg = \\"\\\\e[49m\\"\\n    end\\n    \\"#{bg}\\\\e[#{COLORS[color]}m#{text}\\\\e[#{COLORS[:reset]}m#{reset_bg}\\"\\n  end\\n\\n  # Internal: Removes all backtrace frames pointing to the logging facility\\n  # itself.\\n  def clean_caller_locations\\n    caller_locations.reject { |t| t.absolute_path&.end_with?(\\"logrb.rb\\") }\\n  end\\n\\n  # Internal: Returns the caller of a function, returning a pair containing\\n  # its path and base method name.\\n  def determine_caller\\n    c = clean_caller_locations.first\\n    [normalize_location(c), c.base_label]\\n  end\\n\\n  # Internal: Performs a cleanup for a given backtrace frame.\\n  #\\n  # trace - Trace to be clean.\\n  # include_function_name - Optional. When true, includes the function name\\n  #   on the normalized string. Defaults to false.\\n  def normalize_location(trace, include_function_name: false)\\n    path = trace.absolute_path\\n    return trace.to_s if path.nil?\\n\\n    if (root = Gem.path.find { |p| path.start_with?(p) })\\n      path = \\"$GEM_PATH#{path[root.length..]}\\"\\n    end\\n    \\"#{path}:#{trace.lineno}#{include_function_name ? \\" in `#{trace.label}\'\\" : \\"\\"}\\"\\n  end\\n\\n  # Internal: Returns a string containing a stacktrace of the current\\n  # invocation.\\n  def stack_trace(trace = clean_caller_locations)\\n    trace.map { |s| normalize_location(s, include_function_name: true) }.join(\\"\\\\n\\")\\n  end\\n\\n  # Internal: Composes a log line with given information.\\n  # level       - The severity of the log message\\n  # caller_meta - An Array containing the caller\'s location and name\\n  # msg         - The message to be logged\\n  # fields      - A Hash of fields to be included in the entry\\n  def compose_line(level, caller_meta, msg, fields)\\n    ts = Time.now.strftime(\\"%Y-%m-%dT%H:%M:%S.%L%z\\")\\n    msg = \\" #{msg}\\" unless msg.empty?\\n    fields_str = if fields.empty?\\n                   \\"\\"\\n                 else\\n                   \\" #{fields}\\"\\n                 end\\n    level_str = color(level, level.to_s.upcase)\\n    \\"#{ts} #{level_str}: #{caller_meta.last}:#{msg}#{fields_str}\\"\\n  end\\n\\n  # Internal: Logs a text entry to the current output.\\n  # level       - The severity of the message to be logged.\\n  # msg         - The message to be logged\\n  # error       - Either an Exception object or nil. This parameter is used\\n  #               to provide extra information on the logged entry.\\n  # fields      - A Hash containing metadata to be included in the logged\\n  #               entry.\\n  # caller_meta - An Array containing the caller\'s location and name.\\n  def text(level, msg, error, fields, caller_meta)\\n    fields ||= {}\\n    fields.merge! @fields\\n    write_output(compose_line(level, caller_meta, msg, fields))\\n    if (error_message = error&.message)\\n      write_output(\\": #{error_message}\\")\\n    end\\n    write_output(\\"\\\\n\\")\\n    return unless level == :error\\n\\n    backtrace_str = backtrace(error)\\n                    .split(\\"\\\\n\\")\\n                    .map { |s| \\"        #{s}\\" }.join(\\"\\\\n\\")\\n    write_output(backtrace_str)\\n    write_output(\\"\\\\n\\")\\n  end\\n\\n  # Internal: Attempts to obtain a backtrace from a provided object. In case\\n  # the object does not include backtrace metadata, uses #stack_trace as a\\n  # fallback.\\n  def backtrace(from)\\n    if from.respond_to?(:backtrace_locations) && !from.backtrace_locations.nil?\\n      stack_trace(from.backtrace_locations)\\n    else\\n      stack_trace\\n    end\\n  end\\n\\n  # Internal: Writes a given value to the current\'s output IO. Calls to this\\n  # method are thread-safe.\\n  def write_output(text)\\n    Logrb.mutex.synchronize do\\n      @output.write(text)\\n    end\\n  end\\n\\n  # Internal: Logs a JSON entry to the current output.\\n  # level       - The severity of the message to be logged.\\n  # msg         - The message to be logged\\n  # error       - Either an Exception object or nil. This parameter is used\\n  #               to provide extra information on the logged entry.\\n  # fields      - A Hash containing metadata to be included in the logged\\n  #               entry.\\n  # caller_meta - An Array containing the caller\'s location and name.\\n  def json(level, msg, error, fields, caller_meta)\\n    fields ||= {}\\n    fields.merge! @fields\\n    data = {\\n      level: level,\\n      caller: caller_meta.first,\\n      msg: msg,\\n      ts: Time.now.utc.to_i\\n    }\\n\\n    data[:stacktrace] = backtrace(error) if level == :error\\n\\n    data.merge!(fields)\\n    write_output(\\"#{data.to_json}\\\\n\\")\\n  end\\n\\n  # Internal: Dynamically invokes the current log formatter for the\\n  # provided arguments. For further information, see #text and #json\\n  def wrap(level, msg, error, fields)\\n    msg = msg.to_s\\n    send(@format, level, msg, error, fields, determine_caller)\\n    exit 1 if level == :fatal\\n  end\\nend","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code><span class=\\"k\\">class</span> <span class=\\"nc\\">Logrb</span>\\n  <span class=\\"nb\\">attr_accessor</span> <span class=\\"ss\\">:fields</span><span class=\\"p\\">,</span> <span class=\\"ss\\">:level</span><span class=\\"p\\">,</span> <span class=\\"ss\\">:format</span>\\n\\n  <span class=\\"no\\">COLORS</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span>\\n    <span class=\\"ss\\">error: </span><span class=\\"mi\\">31</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">fatal: </span><span class=\\"mi\\">31</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">unknown: </span><span class=\\"mi\\">0</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">info: </span><span class=\\"mi\\">36</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">warn: </span><span class=\\"mi\\">33</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">debug: </span><span class=\\"mi\\">30</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">reset: </span><span class=\\"mi\\">0</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">dump: </span><span class=\\"mi\\">37</span>\\n  <span class=\\"p\\">}.</span><span class=\\"nf\\">freeze</span>\\n\\n  <span class=\\"no\\">BACKGROUNDS</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span>\\n    <span class=\\"ss\\">debug: </span><span class=\\"mi\\">107</span>\\n  <span class=\\"p\\">}.</span><span class=\\"nf\\">freeze</span>\\n\\n  <span class=\\"no\\">LEVELS</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span>\\n    <span class=\\"ss\\">error: </span><span class=\\"mi\\">4</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">fatal: </span><span class=\\"mi\\">4</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">unknown: </span><span class=\\"mi\\">4</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">warn: </span><span class=\\"mi\\">3</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">info: </span><span class=\\"mi\\">2</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">debug: </span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span>\\n    <span class=\\"ss\\">reset: </span><span class=\\"mi\\">1</span>\\n  <span class=\\"p\\">}.</span><span class=\\"nf\\">freeze</span>\\n\\n  <span class=\\"c1\\"># Internal: A mutex instance used for synchronizing the usage of the output</span>\\n  <span class=\\"c1\\"># IO.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nc\\">self</span><span class=\\"o\\">.</span><span class=\\"nf\\">mutex</span>\\n    <span class=\\"vi\\">@mutex</span> <span class=\\"o\\">||=</span> <span class=\\"no\\">Mutex</span><span class=\\"p\\">.</span><span class=\\"nf\\">new</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Initializes a new Logger instance that outputs logs to a provided output.</span>\\n  <span class=\\"c1\\">#</span>\\n  <span class=\\"c1\\"># output - an IO-like object that implements a #write method.</span>\\n  <span class=\\"c1\\"># format - Optional. Indicates the format used to output log entries.</span>\\n  <span class=\\"c1\\">#          Supports :text (default) and :json.</span>\\n  <span class=\\"c1\\"># level  - Level to filter this logger instance</span>\\n  <span class=\\"c1\\"># fields - Fields to include in emitted entries</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">initialize</span><span class=\\"p\\">(</span><span class=\\"n\\">output</span><span class=\\"p\\">,</span> <span class=\\"ss\\">format: :text</span><span class=\\"p\\">,</span> <span class=\\"ss\\">level: :debug</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"vi\\">@output</span> <span class=\\"o\\">=</span> <span class=\\"n\\">output</span>\\n    <span class=\\"vi\\">@format</span> <span class=\\"o\\">=</span> <span class=\\"nb\\">format</span>\\n    <span class=\\"vi\\">@fields</span> <span class=\\"o\\">=</span> <span class=\\"n\\">fields</span>\\n    <span class=\\"vi\\">@level</span> <span class=\\"o\\">=</span> <span class=\\"n\\">level</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Returns a new logger instance using the same output of its parent\'s, with</span>\\n  <span class=\\"c1\\"># an optional set of fields to be merged against the parent\'s fields.</span>\\n  <span class=\\"c1\\">#</span>\\n  <span class=\\"c1\\"># fields - A Hash containing metadata to be included in all output entries</span>\\n  <span class=\\"c1\\">#          emitted from the returned instance.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">with_fields</span><span class=\\"p\\">(</span><span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">inst</span> <span class=\\"o\\">=</span> <span class=\\"no\\">Logrb</span><span class=\\"p\\">.</span><span class=\\"nf\\">new</span><span class=\\"p\\">(</span><span class=\\"vi\\">@output</span><span class=\\"p\\">,</span> <span class=\\"ss\\">format: </span><span class=\\"vi\\">@format</span><span class=\\"p\\">,</span> <span class=\\"ss\\">level: </span><span class=\\"vi\\">@level</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">inst</span><span class=\\"p\\">.</span><span class=\\"nf\\">fields</span> <span class=\\"o\\">=</span> <span class=\\"vi\\">@fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge</span><span class=\\"p\\">(</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">inst</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"no\\">LEVELS</span><span class=\\"p\\">.</span><span class=\\"nf\\">except</span><span class=\\"p\\">(</span><span class=\\"ss\\">:error</span><span class=\\"p\\">,</span> <span class=\\"ss\\">:fatal</span><span class=\\"p\\">).</span><span class=\\"nf\\">each_key</span> <span class=\\"k\\">do</span> <span class=\\"o\\">|</span><span class=\\"nb\\">name</span><span class=\\"o\\">|</span>\\n    <span class=\\"n\\">define_method</span><span class=\\"p\\">(</span><span class=\\"nb\\">name</span><span class=\\"p\\">)</span> <span class=\\"k\\">do</span> <span class=\\"o\\">|</span><span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"o\\">|</span>\\n      <span class=\\"k\\">return</span> <span class=\\"k\\">if</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"vi\\">@level</span><span class=\\"p\\">]</span> <span class=\\"o\\">&gt;</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"nb\\">name</span><span class=\\"p\\">]</span>\\n\\n      <span class=\\"n\\">wrap</span><span class=\\"p\\">(</span><span class=\\"nb\\">name</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n      <span class=\\"kp\\">nil</span>\\n    <span class=\\"k\\">end</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Public: Emits an error to the log output. When error is provided, this</span>\\n  <span class=\\"c1\\"># method attempts to gather a stacktrace to include in the emitted entry.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">error</span><span class=\\"p\\">(</span><span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">return</span> <span class=\\"k\\">if</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"vi\\">@level</span><span class=\\"p\\">]</span> <span class=\\"o\\">&gt;</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"ss\\">:error</span><span class=\\"p\\">]</span>\\n\\n    <span class=\\"n\\">wrap</span><span class=\\"p\\">(</span><span class=\\"ss\\">:error</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"kp\\">nil</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Public: Emits a fatal message to the log output, and invokes Kernel#exit</span>\\n  <span class=\\"c1\\"># with a non-zero status code. When error is provided, this method attempts</span>\\n  <span class=\\"c1\\"># to gather a stacktrace to include in the emitted entry. This log entry</span>\\n  <span class=\\"c1\\"># cannot be filtered, and is always emitted.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">fatal</span><span class=\\"p\\">(</span><span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">wrap</span><span class=\\"p\\">(</span><span class=\\"ss\\">:fatal</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"nb\\">exit</span> <span class=\\"mi\\">1</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Public: Dumps a given String or Array in the same format as `hexdump -C`.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">dump</span><span class=\\"p\\">(</span><span class=\\"n\\">log</span><span class=\\"p\\">,</span> <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">return</span> <span class=\\"k\\">if</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"vi\\">@level</span><span class=\\"p\\">]</span> <span class=\\"o\\">&gt;</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"ss\\">:debug</span><span class=\\"p\\">]</span>\\n\\n    <span class=\\"k\\">if</span> <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n      <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"n\\">log</span>\\n      <span class=\\"n\\">log</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span>\\n    <span class=\\"k\\">end</span>\\n\\n    <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">pack</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"C*\\"</span><span class=\\"p\\">)</span> <span class=\\"k\\">if</span> <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">is_a?</span> <span class=\\"no\\">Array</span>\\n    <span class=\\"n\\">dump</span> <span class=\\"o\\">=</span> <span class=\\"p\\">[]</span>\\n    <span class=\\"n\\">padding</span> <span class=\\"o\\">=</span> <span class=\\"vi\\">@format</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:json</span> <span class=\\"p\\">?</span> <span class=\\"s2\\">\\"\\"</span> <span class=\\"p\\">:</span> <span class=\\"s2\\">\\"        \\"</span>\\n    <span class=\\"no\\">Hexdump</span><span class=\\"p\\">.</span><span class=\\"nf\\">dump</span><span class=\\"p\\">(</span><span class=\\"n\\">data</span><span class=\\"p\\">,</span> <span class=\\"ss\\">output: </span><span class=\\"n\\">dump</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">dump</span><span class=\\"p\\">.</span><span class=\\"nf\\">map!</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">line</span><span class=\\"o\\">|</span> <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">padding</span><span class=\\"si\\">}#{</span><span class=\\"n\\">line</span><span class=\\"p\\">.</span><span class=\\"nf\\">chomp</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span> <span class=\\"p\\">}</span>\\n    <span class=\\"n\\">dump</span> <span class=\\"o\\">=</span> <span class=\\"n\\">dump</span><span class=\\"p\\">.</span><span class=\\"nf\\">join</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n\\n    <span class=\\"k\\">if</span> <span class=\\"vi\\">@format</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:json</span>\\n      <span class=\\"n\\">fields</span><span class=\\"p\\">[</span><span class=\\"ss\\">:dump</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">dump</span>\\n      <span class=\\"n\\">dump</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"n\\">wrap</span><span class=\\"p\\">(</span><span class=\\"ss\\">:dump</span><span class=\\"p\\">,</span> <span class=\\"n\\">log</span> <span class=\\"o\\">||</span> <span class=\\"s2\\">\\"\\"</span><span class=\\"p\\">,</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">dump</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\n\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span> <span class=\\"k\\">unless</span> <span class=\\"n\\">dump</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"kp\\">private</span>\\n\\n  <span class=\\"c1\\"># Internal: Formats a given text using the ANSI escape sequences. Notice</span>\\n  <span class=\\"c1\\"># that this method does not attempt to determine whether the current output</span>\\n  <span class=\\"c1\\"># supports escape sequences.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">color</span><span class=\\"p\\">(</span><span class=\\"n\\">color</span><span class=\\"p\\">,</span> <span class=\\"n\\">text</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">bg</span> <span class=\\"o\\">=</span> <span class=\\"no\\">BACKGROUNDS</span><span class=\\"p\\">[</span><span class=\\"n\\">color</span><span class=\\"p\\">]</span>\\n    <span class=\\"n\\">reset_bg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"\\"</span>\\n    <span class=\\"k\\">if</span> <span class=\\"n\\">bg</span>\\n      <span class=\\"n\\">bg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[</span><span class=\\"si\\">#{</span><span class=\\"n\\">bg</span><span class=\\"si\\">}</span><span class=\\"s2\\">m\\"</span>\\n      <span class=\\"n\\">reset_bg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[49m\\"</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">bg</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[</span><span class=\\"si\\">#{</span><span class=\\"no\\">COLORS</span><span class=\\"p\\">[</span><span class=\\"n\\">color</span><span class=\\"p\\">]</span><span class=\\"si\\">}</span><span class=\\"s2\\">m</span><span class=\\"si\\">#{</span><span class=\\"n\\">text</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[</span><span class=\\"si\\">#{</span><span class=\\"no\\">COLORS</span><span class=\\"p\\">[</span><span class=\\"ss\\">:reset</span><span class=\\"p\\">]</span><span class=\\"si\\">}</span><span class=\\"s2\\">m</span><span class=\\"si\\">#{</span><span class=\\"n\\">reset_bg</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Removes all backtrace frames pointing to the logging facility</span>\\n  <span class=\\"c1\\"># itself.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">clean_caller_locations</span>\\n    <span class=\\"n\\">caller_locations</span><span class=\\"p\\">.</span><span class=\\"nf\\">reject</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">t</span><span class=\\"o\\">|</span> <span class=\\"n\\">t</span><span class=\\"p\\">.</span><span class=\\"nf\\">absolute_path</span><span class=\\"o\\">&amp;</span><span class=\\"p\\">.</span><span class=\\"nf\\">end_with?</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"logrb.rb\\"</span><span class=\\"p\\">)</span> <span class=\\"p\\">}</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Returns the caller of a function, returning a pair containing</span>\\n  <span class=\\"c1\\"># its path and base method name.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">determine_caller</span>\\n    <span class=\\"n\\">c</span> <span class=\\"o\\">=</span> <span class=\\"n\\">clean_caller_locations</span><span class=\\"p\\">.</span><span class=\\"nf\\">first</span>\\n    <span class=\\"p\\">[</span><span class=\\"n\\">normalize_location</span><span class=\\"p\\">(</span><span class=\\"n\\">c</span><span class=\\"p\\">),</span> <span class=\\"n\\">c</span><span class=\\"p\\">.</span><span class=\\"nf\\">base_label</span><span class=\\"p\\">]</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Performs a cleanup for a given backtrace frame.</span>\\n  <span class=\\"c1\\">#</span>\\n  <span class=\\"c1\\"># trace - Trace to be clean.</span>\\n  <span class=\\"c1\\"># include_function_name - Optional. When true, includes the function name</span>\\n  <span class=\\"c1\\">#   on the normalized string. Defaults to false.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">normalize_location</span><span class=\\"p\\">(</span><span class=\\"n\\">trace</span><span class=\\"p\\">,</span> <span class=\\"ss\\">include_function_name: </span><span class=\\"kp\\">false</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">path</span> <span class=\\"o\\">=</span> <span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">absolute_path</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_s</span> <span class=\\"k\\">if</span> <span class=\\"n\\">path</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">root</span> <span class=\\"o\\">=</span> <span class=\\"no\\">Gem</span><span class=\\"p\\">.</span><span class=\\"nf\\">path</span><span class=\\"p\\">.</span><span class=\\"nf\\">find</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"nb\\">p</span><span class=\\"o\\">|</span> <span class=\\"n\\">path</span><span class=\\"p\\">.</span><span class=\\"nf\\">start_with?</span><span class=\\"p\\">(</span><span class=\\"nb\\">p</span><span class=\\"p\\">)</span> <span class=\\"p\\">})</span>\\n      <span class=\\"n\\">path</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"$GEM_PATH</span><span class=\\"si\\">#{</span><span class=\\"n\\">path</span><span class=\\"p\\">[</span><span class=\\"n\\">root</span><span class=\\"p\\">.</span><span class=\\"nf\\">length</span><span class=\\"o\\">..</span><span class=\\"p\\">]</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">path</span><span class=\\"si\\">}</span><span class=\\"s2\\">:</span><span class=\\"si\\">#{</span><span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">lineno</span><span class=\\"si\\">}#{</span><span class=\\"n\\">include_function_name</span> <span class=\\"p\\">?</span> <span class=\\"s2\\">\\" in `</span><span class=\\"si\\">#{</span><span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">label</span><span class=\\"si\\">}</span><span class=\\"s2\\">\'\\"</span> <span class=\\"p\\">:</span> <span class=\\"s2\\">\\"\\"</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Returns a string containing a stacktrace of the current</span>\\n  <span class=\\"c1\\"># invocation.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">stack_trace</span><span class=\\"p\\">(</span><span class=\\"n\\">trace</span> <span class=\\"o\\">=</span> <span class=\\"n\\">clean_caller_locations</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">map</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">s</span><span class=\\"o\\">|</span> <span class=\\"n\\">normalize_location</span><span class=\\"p\\">(</span><span class=\\"n\\">s</span><span class=\\"p\\">,</span> <span class=\\"ss\\">include_function_name: </span><span class=\\"kp\\">true</span><span class=\\"p\\">)</span> <span class=\\"p\\">}.</span><span class=\\"nf\\">join</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Composes a log line with given information.</span>\\n  <span class=\\"c1\\"># level       - The severity of the log message</span>\\n  <span class=\\"c1\\"># caller_meta - An Array containing the caller\'s location and name</span>\\n  <span class=\\"c1\\"># msg         - The message to be logged</span>\\n  <span class=\\"c1\\"># fields      - A Hash of fields to be included in the entry</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">compose_line</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">ts</span> <span class=\\"o\\">=</span> <span class=\\"no\\">Time</span><span class=\\"p\\">.</span><span class=\\"nf\\">now</span><span class=\\"p\\">.</span><span class=\\"nf\\">strftime</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"%Y-%m-%dT%H:%M:%S.%L%z\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">msg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\" </span><span class=\\"si\\">#{</span><span class=\\"n\\">msg</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span> <span class=\\"k\\">unless</span> <span class=\\"n\\">msg</span><span class=\\"p\\">.</span><span class=\\"nf\\">empty?</span>\\n    <span class=\\"n\\">fields_str</span> <span class=\\"o\\">=</span> <span class=\\"k\\">if</span> <span class=\\"n\\">fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">empty?</span>\\n                   <span class=\\"s2\\">\\"\\"</span>\\n                 <span class=\\"k\\">else</span>\\n                   <span class=\\"s2\\">\\" </span><span class=\\"si\\">#{</span><span class=\\"n\\">fields</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n                 <span class=\\"k\\">end</span>\\n    <span class=\\"n\\">level_str</span> <span class=\\"o\\">=</span> <span class=\\"n\\">color</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">level</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_s</span><span class=\\"p\\">.</span><span class=\\"nf\\">upcase</span><span class=\\"p\\">)</span>\\n    <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">ts</span><span class=\\"si\\">}</span><span class=\\"s2\\"> </span><span class=\\"si\\">#{</span><span class=\\"n\\">level_str</span><span class=\\"si\\">}</span><span class=\\"s2\\">: </span><span class=\\"si\\">#{</span><span class=\\"n\\">caller_meta</span><span class=\\"p\\">.</span><span class=\\"nf\\">last</span><span class=\\"si\\">}</span><span class=\\"s2\\">:</span><span class=\\"si\\">#{</span><span class=\\"n\\">msg</span><span class=\\"si\\">}#{</span><span class=\\"n\\">fields_str</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Logs a text entry to the current output.</span>\\n  <span class=\\"c1\\"># level       - The severity of the message to be logged.</span>\\n  <span class=\\"c1\\"># msg         - The message to be logged</span>\\n  <span class=\\"c1\\"># error       - Either an Exception object or nil. This parameter is used</span>\\n  <span class=\\"c1\\">#               to provide extra information on the logged entry.</span>\\n  <span class=\\"c1\\"># fields      - A Hash containing metadata to be included in the logged</span>\\n  <span class=\\"c1\\">#               entry.</span>\\n  <span class=\\"c1\\"># caller_meta - An Array containing the caller\'s location and name.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">text</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">fields</span> <span class=\\"o\\">||=</span> <span class=\\"p\\">{}</span>\\n    <span class=\\"n\\">fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge!</span> <span class=\\"vi\\">@fields</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"n\\">compose_line</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">))</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">error_message</span> <span class=\\"o\\">=</span> <span class=\\"n\\">error</span><span class=\\"o\\">&amp;</span><span class=\\"p\\">.</span><span class=\\"nf\\">message</span><span class=\\"p\\">)</span>\\n      <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\": </span><span class=\\"si\\">#{</span><span class=\\"n\\">error_message</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">return</span> <span class=\\"k\\">unless</span> <span class=\\"n\\">level</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:error</span>\\n\\n    <span class=\\"n\\">backtrace_str</span> <span class=\\"o\\">=</span> <span class=\\"n\\">backtrace</span><span class=\\"p\\">(</span><span class=\\"n\\">error</span><span class=\\"p\\">)</span>\\n                    <span class=\\"p\\">.</span><span class=\\"nf\\">split</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n                    <span class=\\"p\\">.</span><span class=\\"nf\\">map</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">s</span><span class=\\"o\\">|</span> <span class=\\"s2\\">\\"        </span><span class=\\"si\\">#{</span><span class=\\"n\\">s</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span> <span class=\\"p\\">}.</span><span class=\\"nf\\">join</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"n\\">backtrace_str</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Attempts to obtain a backtrace from a provided object. In case</span>\\n  <span class=\\"c1\\"># the object does not include backtrace metadata, uses #stack_trace as a</span>\\n  <span class=\\"c1\\"># fallback.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">backtrace</span><span class=\\"p\\">(</span><span class=\\"n\\">from</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">if</span> <span class=\\"n\\">from</span><span class=\\"p\\">.</span><span class=\\"nf\\">respond_to?</span><span class=\\"p\\">(</span><span class=\\"ss\\">:backtrace_locations</span><span class=\\"p\\">)</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"o\\">!</span><span class=\\"n\\">from</span><span class=\\"p\\">.</span><span class=\\"nf\\">backtrace_locations</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n      <span class=\\"n\\">stack_trace</span><span class=\\"p\\">(</span><span class=\\"n\\">from</span><span class=\\"p\\">.</span><span class=\\"nf\\">backtrace_locations</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">else</span>\\n      <span class=\\"n\\">stack_trace</span>\\n    <span class=\\"k\\">end</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Writes a given value to the current\'s output IO. Calls to this</span>\\n  <span class=\\"c1\\"># method are thread-safe.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">write_output</span><span class=\\"p\\">(</span><span class=\\"n\\">text</span><span class=\\"p\\">)</span>\\n    <span class=\\"no\\">Logrb</span><span class=\\"p\\">.</span><span class=\\"nf\\">mutex</span><span class=\\"p\\">.</span><span class=\\"nf\\">synchronize</span> <span class=\\"k\\">do</span>\\n      <span class=\\"vi\\">@output</span><span class=\\"p\\">.</span><span class=\\"nf\\">write</span><span class=\\"p\\">(</span><span class=\\"n\\">text</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">end</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Logs a JSON entry to the current output.</span>\\n  <span class=\\"c1\\"># level       - The severity of the message to be logged.</span>\\n  <span class=\\"c1\\"># msg         - The message to be logged</span>\\n  <span class=\\"c1\\"># error       - Either an Exception object or nil. This parameter is used</span>\\n  <span class=\\"c1\\">#               to provide extra information on the logged entry.</span>\\n  <span class=\\"c1\\"># fields      - A Hash containing metadata to be included in the logged</span>\\n  <span class=\\"c1\\">#               entry.</span>\\n  <span class=\\"c1\\"># caller_meta - An Array containing the caller\'s location and name.</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">json</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">fields</span> <span class=\\"o\\">||=</span> <span class=\\"p\\">{}</span>\\n    <span class=\\"n\\">fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge!</span> <span class=\\"vi\\">@fields</span>\\n    <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span>\\n      <span class=\\"ss\\">level: </span><span class=\\"n\\">level</span><span class=\\"p\\">,</span>\\n      <span class=\\"ss\\">caller: </span><span class=\\"n\\">caller_meta</span><span class=\\"p\\">.</span><span class=\\"nf\\">first</span><span class=\\"p\\">,</span>\\n      <span class=\\"ss\\">msg: </span><span class=\\"n\\">msg</span><span class=\\"p\\">,</span>\\n      <span class=\\"ss\\">ts: </span><span class=\\"no\\">Time</span><span class=\\"p\\">.</span><span class=\\"nf\\">now</span><span class=\\"p\\">.</span><span class=\\"nf\\">utc</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_i</span>\\n    <span class=\\"p\\">}</span>\\n\\n    <span class=\\"n\\">data</span><span class=\\"p\\">[</span><span class=\\"ss\\">:stacktrace</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">backtrace</span><span class=\\"p\\">(</span><span class=\\"n\\">error</span><span class=\\"p\\">)</span> <span class=\\"k\\">if</span> <span class=\\"n\\">level</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:error</span>\\n\\n    <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge!</span><span class=\\"p\\">(</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_json</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n  <span class=\\"k\\">end</span>\\n\\n  <span class=\\"c1\\"># Internal: Dynamically invokes the current log formatter for the</span>\\n  <span class=\\"c1\\"># provided arguments. For further information, see #text and #json</span>\\n  <span class=\\"k\\">def</span> <span class=\\"nf\\">wrap</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">msg</span> <span class=\\"o\\">=</span> <span class=\\"n\\">msg</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_s</span>\\n    <span class=\\"nb\\">send</span><span class=\\"p\\">(</span><span class=\\"vi\\">@format</span><span class=\\"p\\">,</span> <span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">,</span> <span class=\\"n\\">determine_caller</span><span class=\\"p\\">)</span>\\n    <span class=\\"nb\\">exit</span> <span class=\\"mi\\">1</span> <span class=\\"k\\">if</span> <span class=\\"n\\">level</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:fatal</span>\\n  <span class=\\"k\\">end</span>\\n<span class=\\"k\\">end</span>\\n</code></pre></div>"}],"defs":{"initialize":{"source":"source","definition":{"type":"def","name":"initialize","args":[{"type":"arg","name":"output"},{"type":"kwoptarg","name":"format","value_type":"sym","value":"text"},{"type":"kwoptarg","name":"level","value_type":"sym","value":"debug"},{"type":"kwrestarg","name":"fields"}],"doc":{"type":"def","contents":[{"type":"text_block","contents":"Initializes a new Logger instance that outputs logs to a provided output."},{"type":"field_block","contents":{"output":{"type":"text_block","contents":[{"type":"span","contents":"an IO-like object that implements a "},{"type":"ref","ref_type":"method","name":"write","target":null,"class_path":null,"contents":"#write"},{"type":"span","contents":" method."}]},"format":{"type":"text_block","contents":[{"type":"span","contents":"Optional. Indicates the format used to output log entries. Supports "},{"type":"sym_ref","contents":":text"},{"type":"span","contents":" (default) and "},{"type":"sym_ref","contents":":json"},{"type":"span","contents":"."}]},"level":{"type":"text_block","contents":"Level to filter this logger instance"},"fields":{"type":"text_block","contents":"Fields to include in emitted entries"}}}]},"visibility":"public","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":73,"end_at":78,"source":"  def initialize(output, format: :text, level: :debug, **fields)\\n    @output = output\\n    @format = format\\n    @fields = fields\\n    @level = level\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">initialize</span><span class=\\"p\\">(</span><span class=\\"n\\">output</span><span class=\\"p\\">,</span> <span class=\\"ss\\">format: :text</span><span class=\\"p\\">,</span> <span class=\\"ss\\">level: :debug</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"vi\\">@output</span> <span class=\\"o\\">=</span> <span class=\\"n\\">output</span>\\n    <span class=\\"vi\\">@format</span> <span class=\\"o\\">=</span> <span class=\\"nb\\">format</span>\\n    <span class=\\"vi\\">@fields</span> <span class=\\"o\\">=</span> <span class=\\"n\\">fields</span>\\n    <span class=\\"vi\\">@level</span> <span class=\\"o\\">=</span> <span class=\\"n\\">level</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"with_fields":{"source":"source","definition":{"type":"def","name":"with_fields","args":[{"type":"kwrestarg","name":"fields"}],"doc":{"type":"def","contents":[{"type":"text_block","contents":"Returns a new logger instance using the same output of its parent&#39;s, with\\nan optional set of fields to be merged against the parent&#39;s fields."},{"type":"field_block","contents":{"fields":{"type":"text_block","contents":"A Hash containing metadata to be included in all output entries emitted from the returned instance."}}}]},"visibility":"public","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":85,"end_at":89,"source":"  def with_fields(**fields)\\n    inst = Logrb.new(@output, format: @format, level: @level)\\n    inst.fields = @fields.merge(fields)\\n    inst\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">with_fields</span><span class=\\"p\\">(</span><span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">inst</span> <span class=\\"o\\">=</span> <span class=\\"no\\">Logrb</span><span class=\\"p\\">.</span><span class=\\"nf\\">new</span><span class=\\"p\\">(</span><span class=\\"vi\\">@output</span><span class=\\"p\\">,</span> <span class=\\"ss\\">format: </span><span class=\\"vi\\">@format</span><span class=\\"p\\">,</span> <span class=\\"ss\\">level: </span><span class=\\"vi\\">@level</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">inst</span><span class=\\"p\\">.</span><span class=\\"nf\\">fields</span> <span class=\\"o\\">=</span> <span class=\\"vi\\">@fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge</span><span class=\\"p\\">(</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">inst</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"error":{"source":"source","definition":{"type":"def","name":"error","args":[{"type":"arg","name":"msg"},{"type":"optarg","name":"error","value_type":"nil","value":"nil"},{"type":"kwrestarg","name":"fields"}],"doc":{"doc_visibility_annotation":"public","type":"def","contents":[{"type":"text_block","contents":" Emits an error to the log output. When error is provided, this\\nmethod attempts to gather a stacktrace to include in the emitted entry."}]},"visibility":"public","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":102,"end_at":107,"source":"  def error(msg, error = nil, **fields)\\n    return if LEVELS[@level] > LEVELS[:error]\\n\\n    wrap(:error, msg, error, fields)\\n    nil\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">error</span><span class=\\"p\\">(</span><span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">return</span> <span class=\\"k\\">if</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"vi\\">@level</span><span class=\\"p\\">]</span> <span class=\\"o\\">&gt;</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"ss\\">:error</span><span class=\\"p\\">]</span>\\n\\n    <span class=\\"n\\">wrap</span><span class=\\"p\\">(</span><span class=\\"ss\\">:error</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"kp\\">nil</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"fatal":{"source":"source","definition":{"type":"def","name":"fatal","args":[{"type":"arg","name":"msg"},{"type":"optarg","name":"error","value_type":"nil","value":"nil"},{"type":"kwrestarg","name":"fields"}],"doc":{"doc_visibility_annotation":"public","type":"def","contents":[{"type":"text_block","contents":[{"type":"span","contents":" Emits a fatal message to the log output, and invokes "},{"type":"ref","ref_type":"method","name":"exit","target":"Kernel","class_path":null,"contents":"Kernel#exit"},{"type":"span","contents":"with a non-zero status code. When error is provided, this method attempts\\nto gather a stacktrace to include in the emitted entry. This log entry\\ncannot be filtered, and is always emitted."}]}]},"visibility":"public","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":113,"end_at":116,"source":"  def fatal(msg, error = nil, **fields)\\n    wrap(:fatal, msg, error, fields)\\n    exit 1\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">fatal</span><span class=\\"p\\">(</span><span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">wrap</span><span class=\\"p\\">(</span><span class=\\"ss\\">:fatal</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"nb\\">exit</span> <span class=\\"mi\\">1</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"dump":{"source":"source","definition":{"type":"def","name":"dump","args":[{"type":"arg","name":"log"},{"type":"optarg","name":"data","value_type":"nil","value":"nil"},{"type":"kwrestarg","name":"fields"}],"doc":{"doc_visibility_annotation":"public","type":"def","contents":[{"type":"text_block","contents":" Dumps a given String or Array in the same format as <code>hexdump -C</code>."}]},"visibility":"public","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":119,"end_at":140,"source":"  def dump(log, data = nil, **fields)\\n    return if LEVELS[@level] > LEVELS[:debug]\\n\\n    if data.nil?\\n      data = log\\n      log = nil\\n    end\\n\\n    data = data.pack(\\"C*\\") if data.is_a? Array\\n    dump = []\\n    padding = @format == :json ? \\"\\" : \\"        \\"\\n    Hexdump.dump(data, output: dump)\\n    dump.map! { |line| \\"#{padding}#{line.chomp}\\" }\\n    dump = dump.join(\\"\\\\n\\")\\n\\n    if @format == :json\\n      fields[:dump] = dump\\n      dump = nil\\n    end\\n    wrap(:dump, log || \\"\\", nil, fields)\\n    write_output(\\"#{dump}\\\\n\\\\n\\") unless dump.nil?\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">dump</span><span class=\\"p\\">(</span><span class=\\"n\\">log</span><span class=\\"p\\">,</span> <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"o\\">**</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">return</span> <span class=\\"k\\">if</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"vi\\">@level</span><span class=\\"p\\">]</span> <span class=\\"o\\">&gt;</span> <span class=\\"no\\">LEVELS</span><span class=\\"p\\">[</span><span class=\\"ss\\">:debug</span><span class=\\"p\\">]</span>\\n\\n    <span class=\\"k\\">if</span> <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n      <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"n\\">log</span>\\n      <span class=\\"n\\">log</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span>\\n    <span class=\\"k\\">end</span>\\n\\n    <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">pack</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"C*\\"</span><span class=\\"p\\">)</span> <span class=\\"k\\">if</span> <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">is_a?</span> <span class=\\"no\\">Array</span>\\n    <span class=\\"n\\">dump</span> <span class=\\"o\\">=</span> <span class=\\"p\\">[]</span>\\n    <span class=\\"n\\">padding</span> <span class=\\"o\\">=</span> <span class=\\"vi\\">@format</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:json</span> <span class=\\"p\\">?</span> <span class=\\"s2\\">\\"\\"</span> <span class=\\"p\\">:</span> <span class=\\"s2\\">\\"        \\"</span>\\n    <span class=\\"no\\">Hexdump</span><span class=\\"p\\">.</span><span class=\\"nf\\">dump</span><span class=\\"p\\">(</span><span class=\\"n\\">data</span><span class=\\"p\\">,</span> <span class=\\"ss\\">output: </span><span class=\\"n\\">dump</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">dump</span><span class=\\"p\\">.</span><span class=\\"nf\\">map!</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">line</span><span class=\\"o\\">|</span> <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">padding</span><span class=\\"si\\">}#{</span><span class=\\"n\\">line</span><span class=\\"p\\">.</span><span class=\\"nf\\">chomp</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span> <span class=\\"p\\">}</span>\\n    <span class=\\"n\\">dump</span> <span class=\\"o\\">=</span> <span class=\\"n\\">dump</span><span class=\\"p\\">.</span><span class=\\"nf\\">join</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n\\n    <span class=\\"k\\">if</span> <span class=\\"vi\\">@format</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:json</span>\\n      <span class=\\"n\\">fields</span><span class=\\"p\\">[</span><span class=\\"ss\\">:dump</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">dump</span>\\n      <span class=\\"n\\">dump</span> <span class=\\"o\\">=</span> <span class=\\"kp\\">nil</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"n\\">wrap</span><span class=\\"p\\">(</span><span class=\\"ss\\">:dump</span><span class=\\"p\\">,</span> <span class=\\"n\\">log</span> <span class=\\"o\\">||</span> <span class=\\"s2\\">\\"\\"</span><span class=\\"p\\">,</span> <span class=\\"kp\\">nil</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">dump</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\n\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span> <span class=\\"k\\">unless</span> <span class=\\"n\\">dump</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"color":{"source":"source","definition":{"type":"def","name":"color","args":[{"type":"arg","name":"color"},{"type":"arg","name":"text"}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Formats a given text using the ANSI escape sequences. Notice\\nthat this method does not attempt to determine whether the current output\\nsupports escape sequences."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":147,"end_at":155,"source":"  def color(color, text)\\n    bg = BACKGROUNDS[color]\\n    reset_bg = \\"\\"\\n    if bg\\n      bg = \\"\\\\e[#{bg}m\\"\\n      reset_bg = \\"\\\\e[49m\\"\\n    end\\n    \\"#{bg}\\\\e[#{COLORS[color]}m#{text}\\\\e[#{COLORS[:reset]}m#{reset_bg}\\"\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">color</span><span class=\\"p\\">(</span><span class=\\"n\\">color</span><span class=\\"p\\">,</span> <span class=\\"n\\">text</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">bg</span> <span class=\\"o\\">=</span> <span class=\\"no\\">BACKGROUNDS</span><span class=\\"p\\">[</span><span class=\\"n\\">color</span><span class=\\"p\\">]</span>\\n    <span class=\\"n\\">reset_bg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"\\"</span>\\n    <span class=\\"k\\">if</span> <span class=\\"n\\">bg</span>\\n      <span class=\\"n\\">bg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[</span><span class=\\"si\\">#{</span><span class=\\"n\\">bg</span><span class=\\"si\\">}</span><span class=\\"s2\\">m\\"</span>\\n      <span class=\\"n\\">reset_bg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[49m\\"</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">bg</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[</span><span class=\\"si\\">#{</span><span class=\\"no\\">COLORS</span><span class=\\"p\\">[</span><span class=\\"n\\">color</span><span class=\\"p\\">]</span><span class=\\"si\\">}</span><span class=\\"s2\\">m</span><span class=\\"si\\">#{</span><span class=\\"n\\">text</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\e</span><span class=\\"s2\\">[</span><span class=\\"si\\">#{</span><span class=\\"no\\">COLORS</span><span class=\\"p\\">[</span><span class=\\"ss\\">:reset</span><span class=\\"p\\">]</span><span class=\\"si\\">}</span><span class=\\"s2\\">m</span><span class=\\"si\\">#{</span><span class=\\"n\\">reset_bg</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"clean_caller_locations":{"source":"source","definition":{"type":"def","name":"clean_caller_locations","args":[],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Removes all backtrace frames pointing to the logging facility\\nitself."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":159,"end_at":161,"source":"  def clean_caller_locations\\n    caller_locations.reject { |t| t.absolute_path&.end_with?(\\"logrb.rb\\") }\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">clean_caller_locations</span>\\n    <span class=\\"n\\">caller_locations</span><span class=\\"p\\">.</span><span class=\\"nf\\">reject</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">t</span><span class=\\"o\\">|</span> <span class=\\"n\\">t</span><span class=\\"p\\">.</span><span class=\\"nf\\">absolute_path</span><span class=\\"o\\">&amp;</span><span class=\\"p\\">.</span><span class=\\"nf\\">end_with?</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"logrb.rb\\"</span><span class=\\"p\\">)</span> <span class=\\"p\\">}</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"determine_caller":{"source":"source","definition":{"type":"def","name":"determine_caller","args":[],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Returns the caller of a function, returning a pair containing\\nits path and base method name."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":165,"end_at":168,"source":"  def determine_caller\\n    c = clean_caller_locations.first\\n    [normalize_location(c), c.base_label]\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">determine_caller</span>\\n    <span class=\\"n\\">c</span> <span class=\\"o\\">=</span> <span class=\\"n\\">clean_caller_locations</span><span class=\\"p\\">.</span><span class=\\"nf\\">first</span>\\n    <span class=\\"p\\">[</span><span class=\\"n\\">normalize_location</span><span class=\\"p\\">(</span><span class=\\"n\\">c</span><span class=\\"p\\">),</span> <span class=\\"n\\">c</span><span class=\\"p\\">.</span><span class=\\"nf\\">base_label</span><span class=\\"p\\">]</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"normalize_location":{"source":"source","definition":{"type":"def","name":"normalize_location","args":[{"type":"arg","name":"trace"},{"type":"kwoptarg","name":"include_function_name","value_type":"bool","value":false}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Performs a cleanup for a given backtrace frame."},{"type":"text_block","contents":"trace - Trace to be clean.\\ninclude<em>function</em>name - Optional. When true, includes the function name on the normalized string. Defaults to false."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":175,"end_at":183,"source":"  def normalize_location(trace, include_function_name: false)\\n    path = trace.absolute_path\\n    return trace.to_s if path.nil?\\n\\n    if (root = Gem.path.find { |p| path.start_with?(p) })\\n      path = \\"$GEM_PATH#{path[root.length..]}\\"\\n    end\\n    \\"#{path}:#{trace.lineno}#{include_function_name ? \\" in `#{trace.label}\'\\" : \\"\\"}\\"\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">normalize_location</span><span class=\\"p\\">(</span><span class=\\"n\\">trace</span><span class=\\"p\\">,</span> <span class=\\"ss\\">include_function_name: </span><span class=\\"kp\\">false</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">path</span> <span class=\\"o\\">=</span> <span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">absolute_path</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_s</span> <span class=\\"k\\">if</span> <span class=\\"n\\">path</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">root</span> <span class=\\"o\\">=</span> <span class=\\"no\\">Gem</span><span class=\\"p\\">.</span><span class=\\"nf\\">path</span><span class=\\"p\\">.</span><span class=\\"nf\\">find</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"nb\\">p</span><span class=\\"o\\">|</span> <span class=\\"n\\">path</span><span class=\\"p\\">.</span><span class=\\"nf\\">start_with?</span><span class=\\"p\\">(</span><span class=\\"nb\\">p</span><span class=\\"p\\">)</span> <span class=\\"p\\">})</span>\\n      <span class=\\"n\\">path</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\"$GEM_PATH</span><span class=\\"si\\">#{</span><span class=\\"n\\">path</span><span class=\\"p\\">[</span><span class=\\"n\\">root</span><span class=\\"p\\">.</span><span class=\\"nf\\">length</span><span class=\\"o\\">..</span><span class=\\"p\\">]</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">path</span><span class=\\"si\\">}</span><span class=\\"s2\\">:</span><span class=\\"si\\">#{</span><span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">lineno</span><span class=\\"si\\">}#{</span><span class=\\"n\\">include_function_name</span> <span class=\\"p\\">?</span> <span class=\\"s2\\">\\" in `</span><span class=\\"si\\">#{</span><span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">label</span><span class=\\"si\\">}</span><span class=\\"s2\\">\'\\"</span> <span class=\\"p\\">:</span> <span class=\\"s2\\">\\"\\"</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"stack_trace":{"source":"source","definition":{"type":"def","name":"stack_trace","args":[{"type":"optarg","name":"trace","value_type":"send","value":{"target":[],"name":"clean_caller_locations"}}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Returns a string containing a stacktrace of the current\\ninvocation."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":187,"end_at":189,"source":"  def stack_trace(trace = clean_caller_locations)\\n    trace.map { |s| normalize_location(s, include_function_name: true) }.join(\\"\\\\n\\")\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">stack_trace</span><span class=\\"p\\">(</span><span class=\\"n\\">trace</span> <span class=\\"o\\">=</span> <span class=\\"n\\">clean_caller_locations</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">trace</span><span class=\\"p\\">.</span><span class=\\"nf\\">map</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">s</span><span class=\\"o\\">|</span> <span class=\\"n\\">normalize_location</span><span class=\\"p\\">(</span><span class=\\"n\\">s</span><span class=\\"p\\">,</span> <span class=\\"ss\\">include_function_name: </span><span class=\\"kp\\">true</span><span class=\\"p\\">)</span> <span class=\\"p\\">}.</span><span class=\\"nf\\">join</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"compose_line":{"source":"source","definition":{"type":"def","name":"compose_line","args":[{"type":"arg","name":"level"},{"type":"arg","name":"caller_meta"},{"type":"arg","name":"msg"},{"type":"arg","name":"fields"}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Composes a log line with given information.\\nlevel       - The severity of the log message\\ncaller_meta - An Array containing the caller&#39;s location and name\\nmsg         - The message to be logged\\nfields      - A Hash of fields to be included in the entry"}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":196,"end_at":206,"source":"  def compose_line(level, caller_meta, msg, fields)\\n    ts = Time.now.strftime(\\"%Y-%m-%dT%H:%M:%S.%L%z\\")\\n    msg = \\" #{msg}\\" unless msg.empty?\\n    fields_str = if fields.empty?\\n                   \\"\\"\\n                 else\\n                   \\" #{fields}\\"\\n                 end\\n    level_str = color(level, level.to_s.upcase)\\n    \\"#{ts} #{level_str}: #{caller_meta.last}:#{msg}#{fields_str}\\"\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">compose_line</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">ts</span> <span class=\\"o\\">=</span> <span class=\\"no\\">Time</span><span class=\\"p\\">.</span><span class=\\"nf\\">now</span><span class=\\"p\\">.</span><span class=\\"nf\\">strftime</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"%Y-%m-%dT%H:%M:%S.%L%z\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">msg</span> <span class=\\"o\\">=</span> <span class=\\"s2\\">\\" </span><span class=\\"si\\">#{</span><span class=\\"n\\">msg</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span> <span class=\\"k\\">unless</span> <span class=\\"n\\">msg</span><span class=\\"p\\">.</span><span class=\\"nf\\">empty?</span>\\n    <span class=\\"n\\">fields_str</span> <span class=\\"o\\">=</span> <span class=\\"k\\">if</span> <span class=\\"n\\">fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">empty?</span>\\n                   <span class=\\"s2\\">\\"\\"</span>\\n                 <span class=\\"k\\">else</span>\\n                   <span class=\\"s2\\">\\" </span><span class=\\"si\\">#{</span><span class=\\"n\\">fields</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n                 <span class=\\"k\\">end</span>\\n    <span class=\\"n\\">level_str</span> <span class=\\"o\\">=</span> <span class=\\"n\\">color</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">level</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_s</span><span class=\\"p\\">.</span><span class=\\"nf\\">upcase</span><span class=\\"p\\">)</span>\\n    <span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">ts</span><span class=\\"si\\">}</span><span class=\\"s2\\"> </span><span class=\\"si\\">#{</span><span class=\\"n\\">level_str</span><span class=\\"si\\">}</span><span class=\\"s2\\">: </span><span class=\\"si\\">#{</span><span class=\\"n\\">caller_meta</span><span class=\\"p\\">.</span><span class=\\"nf\\">last</span><span class=\\"si\\">}</span><span class=\\"s2\\">:</span><span class=\\"si\\">#{</span><span class=\\"n\\">msg</span><span class=\\"si\\">}#{</span><span class=\\"n\\">fields_str</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"text":{"source":"source","definition":{"type":"def","name":"text","args":[{"type":"arg","name":"level"},{"type":"arg","name":"msg"},{"type":"arg","name":"error"},{"type":"arg","name":"fields"},{"type":"arg","name":"caller_meta"}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Logs a text entry to the current output.\\nlevel       - The severity of the message to be logged.\\nmsg         - The message to be logged\\nerror       - Either an Exception object or nil. This parameter is used             to provide extra information on the logged entry.\\nfields      - A Hash containing metadata to be included in the logged             entry.\\ncaller_meta - An Array containing the caller&#39;s location and name."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":216,"end_at":231,"source":"  def text(level, msg, error, fields, caller_meta)\\n    fields ||= {}\\n    fields.merge! @fields\\n    write_output(compose_line(level, caller_meta, msg, fields))\\n    if (error_message = error&.message)\\n      write_output(\\": #{error_message}\\")\\n    end\\n    write_output(\\"\\\\n\\")\\n    return unless level == :error\\n\\n    backtrace_str = backtrace(error)\\n                    .split(\\"\\\\n\\")\\n                    .map { |s| \\"        #{s}\\" }.join(\\"\\\\n\\")\\n    write_output(backtrace_str)\\n    write_output(\\"\\\\n\\")\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">text</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">fields</span> <span class=\\"o\\">||=</span> <span class=\\"p\\">{}</span>\\n    <span class=\\"n\\">fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge!</span> <span class=\\"vi\\">@fields</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"n\\">compose_line</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">))</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">error_message</span> <span class=\\"o\\">=</span> <span class=\\"n\\">error</span><span class=\\"o\\">&amp;</span><span class=\\"p\\">.</span><span class=\\"nf\\">message</span><span class=\\"p\\">)</span>\\n      <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\": </span><span class=\\"si\\">#{</span><span class=\\"n\\">error_message</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">end</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">return</span> <span class=\\"k\\">unless</span> <span class=\\"n\\">level</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:error</span>\\n\\n    <span class=\\"n\\">backtrace_str</span> <span class=\\"o\\">=</span> <span class=\\"n\\">backtrace</span><span class=\\"p\\">(</span><span class=\\"n\\">error</span><span class=\\"p\\">)</span>\\n                    <span class=\\"p\\">.</span><span class=\\"nf\\">split</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n                    <span class=\\"p\\">.</span><span class=\\"nf\\">map</span> <span class=\\"p\\">{</span> <span class=\\"o\\">|</span><span class=\\"n\\">s</span><span class=\\"o\\">|</span> <span class=\\"s2\\">\\"        </span><span class=\\"si\\">#{</span><span class=\\"n\\">s</span><span class=\\"si\\">}</span><span class=\\"s2\\">\\"</span> <span class=\\"p\\">}.</span><span class=\\"nf\\">join</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"n\\">backtrace_str</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"backtrace":{"source":"source","definition":{"type":"def","name":"backtrace","args":[{"type":"arg","name":"from"}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":[{"type":"span","contents":" Attempts to obtain a backtrace from a provided object. In case\\nthe object does not include backtrace metadata, uses "},{"type":"ref","ref_type":"method","name":"stack_trace","target":null,"class_path":null,"contents":"#stack_trace","ref_path":["Logrb","stack_trace"]},{"type":"span","contents":" as a\\nfallback."}]}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":236,"end_at":242,"source":"  def backtrace(from)\\n    if from.respond_to?(:backtrace_locations) && !from.backtrace_locations.nil?\\n      stack_trace(from.backtrace_locations)\\n    else\\n      stack_trace\\n    end\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">backtrace</span><span class=\\"p\\">(</span><span class=\\"n\\">from</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">if</span> <span class=\\"n\\">from</span><span class=\\"p\\">.</span><span class=\\"nf\\">respond_to?</span><span class=\\"p\\">(</span><span class=\\"ss\\">:backtrace_locations</span><span class=\\"p\\">)</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"o\\">!</span><span class=\\"n\\">from</span><span class=\\"p\\">.</span><span class=\\"nf\\">backtrace_locations</span><span class=\\"p\\">.</span><span class=\\"nf\\">nil?</span>\\n      <span class=\\"n\\">stack_trace</span><span class=\\"p\\">(</span><span class=\\"n\\">from</span><span class=\\"p\\">.</span><span class=\\"nf\\">backtrace_locations</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">else</span>\\n      <span class=\\"n\\">stack_trace</span>\\n    <span class=\\"k\\">end</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"write_output":{"source":"source","definition":{"type":"def","name":"write_output","args":[{"type":"arg","name":"text"}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Writes a given value to the current&#39;s output IO. Calls to this\\nmethod are thread-safe."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":246,"end_at":250,"source":"  def write_output(text)\\n    Logrb.mutex.synchronize do\\n      @output.write(text)\\n    end\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">write_output</span><span class=\\"p\\">(</span><span class=\\"n\\">text</span><span class=\\"p\\">)</span>\\n    <span class=\\"no\\">Logrb</span><span class=\\"p\\">.</span><span class=\\"nf\\">mutex</span><span class=\\"p\\">.</span><span class=\\"nf\\">synchronize</span> <span class=\\"k\\">do</span>\\n      <span class=\\"vi\\">@output</span><span class=\\"p\\">.</span><span class=\\"nf\\">write</span><span class=\\"p\\">(</span><span class=\\"n\\">text</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">end</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"json":{"source":"source","definition":{"type":"def","name":"json","args":[{"type":"arg","name":"level"},{"type":"arg","name":"msg"},{"type":"arg","name":"error"},{"type":"arg","name":"fields"},{"type":"arg","name":"caller_meta"}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":" Logs a JSON entry to the current output.\\nlevel       - The severity of the message to be logged.\\nmsg         - The message to be logged\\nerror       - Either an Exception object or nil. This parameter is used             to provide extra information on the logged entry.\\nfields      - A Hash containing metadata to be included in the logged             entry.\\ncaller_meta - An Array containing the caller&#39;s location and name."}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":260,"end_at":274,"source":"  def json(level, msg, error, fields, caller_meta)\\n    fields ||= {}\\n    fields.merge! @fields\\n    data = {\\n      level: level,\\n      caller: caller_meta.first,\\n      msg: msg,\\n      ts: Time.now.utc.to_i\\n    }\\n\\n    data[:stacktrace] = backtrace(error) if level == :error\\n\\n    data.merge!(fields)\\n    write_output(\\"#{data.to_json}\\\\n\\")\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">json</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">,</span> <span class=\\"n\\">caller_meta</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">fields</span> <span class=\\"o\\">||=</span> <span class=\\"p\\">{}</span>\\n    <span class=\\"n\\">fields</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge!</span> <span class=\\"vi\\">@fields</span>\\n    <span class=\\"n\\">data</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span>\\n      <span class=\\"ss\\">level: </span><span class=\\"n\\">level</span><span class=\\"p\\">,</span>\\n      <span class=\\"ss\\">caller: </span><span class=\\"n\\">caller_meta</span><span class=\\"p\\">.</span><span class=\\"nf\\">first</span><span class=\\"p\\">,</span>\\n      <span class=\\"ss\\">msg: </span><span class=\\"n\\">msg</span><span class=\\"p\\">,</span>\\n      <span class=\\"ss\\">ts: </span><span class=\\"no\\">Time</span><span class=\\"p\\">.</span><span class=\\"nf\\">now</span><span class=\\"p\\">.</span><span class=\\"nf\\">utc</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_i</span>\\n    <span class=\\"p\\">}</span>\\n\\n    <span class=\\"n\\">data</span><span class=\\"p\\">[</span><span class=\\"ss\\">:stacktrace</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">backtrace</span><span class=\\"p\\">(</span><span class=\\"n\\">error</span><span class=\\"p\\">)</span> <span class=\\"k\\">if</span> <span class=\\"n\\">level</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:error</span>\\n\\n    <span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">merge!</span><span class=\\"p\\">(</span><span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">write_output</span><span class=\\"p\\">(</span><span class=\\"s2\\">\\"</span><span class=\\"si\\">#{</span><span class=\\"n\\">data</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_json</span><span class=\\"si\\">}</span><span class=\\"se\\">\\\\n</span><span class=\\"s2\\">\\"</span><span class=\\"p\\">)</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null},"wrap":{"source":"source","definition":{"type":"def","name":"wrap","args":[{"type":"arg","name":"level"},{"type":"arg","name":"msg"},{"type":"arg","name":"error"},{"type":"arg","name":"fields"}],"doc":{"doc_visibility_annotation":"internal","type":"def","contents":[{"type":"text_block","contents":[{"type":"span","contents":" Dynamically invokes the current log formatter for the\\nprovided arguments. For further information, see "},{"type":"ref","ref_type":"method","name":"text","target":null,"class_path":null,"contents":"#text","ref_path":["Logrb","text"]},{"type":"span","contents":" and "},{"type":"ref","ref_type":"method","name":"json","target":null,"class_path":null,"contents":"#json","ref_path":["Logrb","json"]}]}]},"visibility":"private","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":278,"end_at":282,"source":"  def wrap(level, msg, error, fields)\\n    msg = msg.to_s\\n    send(@format, level, msg, error, fields, determine_caller)\\n    exit 1 if level == :fatal\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nf\\">wrap</span><span class=\\"p\\">(</span><span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">msg</span> <span class=\\"o\\">=</span> <span class=\\"n\\">msg</span><span class=\\"p\\">.</span><span class=\\"nf\\">to_s</span>\\n    <span class=\\"nb\\">send</span><span class=\\"p\\">(</span><span class=\\"vi\\">@format</span><span class=\\"p\\">,</span> <span class=\\"n\\">level</span><span class=\\"p\\">,</span> <span class=\\"n\\">msg</span><span class=\\"p\\">,</span> <span class=\\"n\\">error</span><span class=\\"p\\">,</span> <span class=\\"n\\">fields</span><span class=\\"p\\">,</span> <span class=\\"n\\">determine_caller</span><span class=\\"p\\">)</span>\\n    <span class=\\"nb\\">exit</span> <span class=\\"mi\\">1</span> <span class=\\"k\\">if</span> <span class=\\"n\\">level</span> <span class=\\"o\\">==</span> <span class=\\"ss\\">:fatal</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null}},"sdefs":{"mutex":{"source":"source","definition":{"type":"defs","name":"mutex","args":[],"doc":{"doc_visibility_annotation":"internal","type":"defs","contents":[{"type":"text_block","contents":" A mutex instance used for synchronizing the usage of the output\\nIO."}]},"visibility":"public","overriden_by":null,"defined_by":{"filename":"/tmp/logrb/lib/logrb.rb","start_at":62,"end_at":64,"source":"  def self.mutex\\n    @mutex ||= Mutex.new\\n  end","markdown_source":"<div class=\\"highlight\\"><pre class=\\"highlight ruby\\"><code>  <span class=\\"k\\">def</span> <span class=\\"nc\\">self</span><span class=\\"o\\">.</span><span class=\\"nf\\">mutex</span>\\n    <span class=\\"vi\\">@mutex</span> <span class=\\"o\\">||=</span> <span class=\\"no\\">Mutex</span><span class=\\"p\\">.</span><span class=\\"nf\\">new</span>\\n  <span class=\\"k\\">end</span>\\n</code></pre></div>"}},"overriding":null}},"classes":[],"modules":[],"includes":[],"extends":[],"inherits":null,"attributes":{"fields":{"source":"source","definition":{"defined_by":["/tmp/logrb/lib/logrb.rb"],"name":"fields","docs":null,"type":"accessor","writer_visibility":"public","reader_visibility":"public"},"overriding":null},"level":{"source":"source","definition":{"defined_by":["/tmp/logrb/lib/logrb.rb"],"name":"level","docs":null,"type":"accessor","writer_visibility":"public","reader_visibility":"public"},"overriding":null},"format":{"source":"source","definition":{"defined_by":["/tmp/logrb/lib/logrb.rb"],"name":"format","docs":null,"type":"accessor","writer_visibility":"public","reader_visibility":"public"},"overriding":null}}}],"methods":[]}'),l=JSON.parse('{"summary":"Small logger inspired by Go\'s Zap","name":"logrb","license":"MIT","git_url":"https://github.com/heyvito/logrb","authors":["Victor Gama"],"host_url":"https://rubygems.org/gems/logrb","git_tip":"3b237ef9af43054eb1def945f0a7575fd48bd530","git_root":"/private/tmp/logrb","timestamp":"Saturday, 23 Oct 2021  4:56 PM GMT","version":"0.1.0"}');function c(s,n){var a=Object.keys(s);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(s);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable}))),a.push.apply(a,e)}return a}function r(s){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){(0,e.Z)(s,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(s,n,Object.getOwnPropertyDescriptor(a,n))}))}return s}var o=function(s){var n="";"inheritance"===s.source?n="inherited":s.overriding&&(n="override");var a=i(s),e=("defs"===a.type?"Class ":"")+"Method";return{name:a.name,visibility:a.visibility,args:a.args,type:e,doc:a.doc,decoration:n}},i=function(s){for(var n=s;"source"!==n.source;)n=n.definition;return n.definition},u=function(s){var n,a=void 0;"inheritance"===s.source?a="inherited":s.overriding&&(a="override");var e=s.source,p=i(s);return n="public"===p.reader_visibility&&"public"===p.writer_visibility?"read/write":"public"===p.reader_visibility&&"public"!==p.writer_visibility?"read only":"write only",{name:p.name,type:"Attribute",visibility:n,decoration:a,origin:e,doc:p.doc}},d=function(s,n){return s.name.localeCompare(n.name)},f=function s(n){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=Object.keys(n.defs).map((function(s){return o(n.defs[s])})).sort(d),p=Object.keys(n.sdefs).map((function(s){return o(n.sdefs[s])})).sort(d),t=Object.keys(n.attributes||{}).map((function(s){return u(n.attributes[s])})).sort(d);return{level:a,name:n.name,type:n.type,classes:n.classes.map((function(n){return s(n,a+1)})),modules:n.modules.map((function(n){return s(n,a+1)})),methods:e.concat(p),attributes:t}},m=[].concat((0,p.Z)(t.classes),(0,p.Z)(t.modules)).map((function(s){return f(s)})),g=l,h={name:g.name,description:g.summary,owner:function(){if(1===l.authors.length)return l.authors[0];var s=l.authors.length-1;return"".concat(l.authors[0]," and ").concat(s," other").concat(s>1?"s":"")}(),license:g.license,links:function(){var s=[];return l.host_url&&s.push({kind:"rubygems",href:l.host_url}),l.git_url&&(-1!==l.git_url.indexOf("github.com/")?s.push({kind:"github",href:l.git_url}):s.push({kind:"git",href:l.git_url})),s}()},b=function(s){return s.defined_by.map((function(s){var n=s.filename.split("/");return{name:n[n.length-1],href:x(s)}}))},v=function(s){return function(n){return n.name===s}},y=function(s,n){return Object.keys(s).map((function(n){return s[n]})).map((function(s){var n="";"inheritance"===s.source?n="inherited":s.overriding&&(n="override");var a=s.source;return r(r({},i(s)),{},{decoration:n,origin:a})}))},_=function s(n,a){if(n){var e=r({},n);return e.parent=a,e.defs=y(e.defs),e.sdefs=y(e.sdefs),e.attributes=Object.keys(e.attributes||{}).map((function(s){return e.attributes[s]})).map((function(s){return u(s)})),e.root=function(){if(a)for(var s=a;s;){if(!s.parent)return s;s=s.parent}}(),e.path=function(){for(var s=[e.name],n=e.parent;n;)s.push(n.name),n=n.parent;return s.reverse()}(),e.resolve=function(s){var n=v(s);return e.modules.find(n)||e.classes.find(n)||e.attributes&&e.attributes.find(n)||e.defs.find(n)||e.sdefs.find(n)||null},e.resolveInheritance=function(s){var n=v(s);return e.modules.find(n)||e.classes.find(n)||e.parent&&e.parent.resolveInheritance(s)},e.resolveParent=function(s){return e.parent?e.parent.resolve(s)||e.parent.resolveParent(s):{type:"Unknown Ref",name:s}},e.resolvePath=function(s){for(var n=(0,p.Z)(s),a=e;n.length>0;){if(!(a=a.resolve(n[0])))return;n.shift()}return a},e.resolveQualified=function(s){var n,a;return s.class_path&&s.class_path.length>0?(a=[].concat((0,p.Z)(s.class_path),[s.name]),n=e.root.resolvePath(a)):(a=s.name,(n=e.resolve(s.name))||(n=e.resolveInheritance(s.name))),n||console.warn("Qualified resolution of ".concat(a," by ").concat(e.name," failed.")),n},e.inherits=e.inherits&&e.resolveInheritance(e.inherits),e.extends=e.extends&&e.extends.map((function(s){return e.resolveQualified(s)})),e.includes=e.includes&&e.includes.map((function(s){return e.resolveQualified(s)})),e.classes=e.classes.map((function(n){return s(n,e)})),e.modules=e.modules.map((function(n){return s(n,e)})),e}},k=function(s){return[].concat((0,p.Z)(s.modules.map((function(s){return _(s)}))),(0,p.Z)(s.classes.map((function(s){return _(s)}))))}(t);k.findPath=function(s){var n=(0,p.Z)(s),a=k.find((function(s){return s.name===n[0]}));if(n.shift(),a){for(;n.length>0;)if(a=a.resolve(n[0]),n.shift(),!a)return;return a}};var w=function(s){for(var n=[s.name],a=s.parent;a;)n.push(a.name),a=a.parent;return n.reverse()},x=function(s){return"".concat(l.git_url,"/blob/").concat(l.git_tip).concat(s.filename.replace(l.git_root,""),"#L").concat(s.start_at)},S=function(s){return s.filename.replace(l.git_root,"")},A=l.timestamp,C=l.version},2167:function(s,n,a){"use strict";var e=a(3848);n.default=void 0;var p,t=(p=a(7294))&&p.__esModule?p:{default:p},l=a(1063),c=a(4651),r=a(7426);var o={};function i(s,n,a,e){if(s&&l.isLocalURL(n)){s.prefetch(n,a,e).catch((function(s){0}));var p=e&&"undefined"!==typeof e.locale?e.locale:s&&s.locale;o[n+"%"+a+(p?"%"+p:"")]=!0}}var u=function(s){var n,a=!1!==s.prefetch,p=c.useRouter(),u=t.default.useMemo((function(){var n=l.resolveHref(p,s.href,!0),a=e(n,2),t=a[0],c=a[1];return{href:t,as:s.as?l.resolveHref(p,s.as):c||t}}),[p,s.href,s.as]),d=u.href,f=u.as,m=s.children,g=s.replace,h=s.shallow,b=s.scroll,v=s.locale;"string"===typeof m&&(m=t.default.createElement("a",null,m));var y=(n=t.default.Children.only(m))&&"object"===typeof n&&n.ref,_=r.useIntersection({rootMargin:"200px"}),k=e(_,2),w=k[0],x=k[1],S=t.default.useCallback((function(s){w(s),y&&("function"===typeof y?y(s):"object"===typeof y&&(y.current=s))}),[y,w]);t.default.useEffect((function(){var s=x&&a&&l.isLocalURL(d),n="undefined"!==typeof v?v:p&&p.locale,e=o[d+"%"+f+(n?"%"+n:"")];s&&!e&&i(p,d,f,{locale:n})}),[f,d,x,v,a,p]);var A={ref:S,onClick:function(s){n.props&&"function"===typeof n.props.onClick&&n.props.onClick(s),s.defaultPrevented||function(s,n,a,e,p,t,c,r){("A"!==s.currentTarget.nodeName||!function(s){var n=s.currentTarget.target;return n&&"_self"!==n||s.metaKey||s.ctrlKey||s.shiftKey||s.altKey||s.nativeEvent&&2===s.nativeEvent.which}(s)&&l.isLocalURL(a))&&(s.preventDefault(),null==c&&e.indexOf("#")>=0&&(c=!1),n[p?"replace":"push"](a,e,{shallow:t,locale:r,scroll:c}))}(s,p,d,f,g,h,b,v)},onMouseEnter:function(s){l.isLocalURL(d)&&(n.props&&"function"===typeof n.props.onMouseEnter&&n.props.onMouseEnter(s),i(p,d,f,{priority:!0}))}};if(s.passHref||"a"===n.type&&!("href"in n.props)){var C="undefined"!==typeof v?v:p&&p.locale,O=p&&p.isLocaleDomain&&l.getDomainLocale(f,C,p&&p.locales,p&&p.domainLocales);A.href=O||l.addBasePath(l.addLocale(f,C,p&&p.defaultLocale))}return t.default.cloneElement(n,A)};n.default=u},7426:function(s,n,a){"use strict";var e=a(3848);Object.defineProperty(n,"__esModule",{value:!0}),n.useIntersection=function(s){var n=s.rootMargin,a=s.disabled||!l,r=p.useRef(),o=p.useState(!1),i=e(o,2),u=i[0],d=i[1],f=p.useCallback((function(s){r.current&&(r.current(),r.current=void 0),a||u||s&&s.tagName&&(r.current=function(s,n,a){var e=function(s){var n=s.rootMargin||"",a=c.get(n);if(a)return a;var e=new Map,p=new IntersectionObserver((function(s){s.forEach((function(s){var n=e.get(s.target),a=s.isIntersecting||s.intersectionRatio>0;n&&a&&n(a)}))}),s);return c.set(n,a={id:n,observer:p,elements:e}),a}(a),p=e.id,t=e.observer,l=e.elements;return l.set(s,n),t.observe(s),function(){l.delete(s),t.unobserve(s),0===l.size&&(t.disconnect(),c.delete(p))}}(s,(function(s){return s&&d(s)}),{rootMargin:n}))}),[a,n,u]);return p.useEffect((function(){if(!l&&!u){var s=t.requestIdleCallback((function(){return d(!0)}));return function(){return t.cancelIdleCallback(s)}}}),[u]),[f,u]};var p=a(7294),t=a(3447),l="undefined"!==typeof IntersectionObserver;var c=new Map},3906:function(s,n,a){"use strict";a.r(n),a.d(n,{default:function(){return h}});var e=a(2809),p=a(9163),t=(0,p.vJ)(["html{line-height:1.15;-webkit-text-size-adjust:100%;text-rendering:geometricPrecision;background-color:#1C1C1E;}*{box-sizing:border-box;margin:0;padding:0;}"]),l=a(992),c=p.ZP.div.withConfig({displayName:"footer__BaseFooter",componentId:"sc-1k45d6c-0"})(["margin:30px 46px;padding-top:10px;border-top:1px solid #707070;color:#707070;",";display:flex;justify-content:space-between;a{font-size:inherit;color:inherit;border-color:#707070;}"],(0,l.d)({size:13})),r=p.ZP.div.withConfig({displayName:"footer__Left",componentId:"sc-1k45d6c-1"})([""]),o=p.ZP.div.withConfig({displayName:"footer__Right",componentId:"sc-1k45d6c-2"})([""]),i=a(9541),u=a(5893),d=function(s){var n=s.updatedAt,a=s.version;return(0,u.jsxs)(c,{children:[(0,u.jsxs)(r,{children:["Last Updated ",n]}),(0,u.jsxs)(o,{children:["Generated by ",(0,u.jsx)(i.r,{href:"https://github.com/heyvito/docrb",text:"Docrb"})," version ",a]})]})},f=a(1197);function m(s,n){var a=Object.keys(s);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(s);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable}))),a.push.apply(a,e)}return a}function g(s){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?m(Object(a),!0).forEach((function(n){(0,e.Z)(s,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(a)):m(Object(a)).forEach((function(n){Object.defineProperty(s,n,Object.getOwnPropertyDescriptor(a,n))}))}return s}var h=function(s){var n=s.Component,a=s.pageProps;return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(t,{}),(0,u.jsx)(n,g({},a)),(0,u.jsx)(d,{updatedAt:f.qT,version:f.i8})]})}},992:function(s,n,a){"use strict";function e(s,n){return n||(n=s.slice(0)),Object.freeze(Object.defineProperties(s,{raw:{value:Object.freeze(n)}}))}var p,t;a.d(n,{d:function(){return r},Z:function(){return c}});var l=function(s){for(var n=arguments.length,a=new Array(n>1?n-1:0),e=1;e<n;e++)a[e-1]=arguments[e];var p=function(n){var e=[];return s.forEach((function(s,p){e.push(s);var t=a[p];t&&("function"===typeof t?e.push(t(n)):e.push(t))})),e.join("")};return p.toString=function(){return p({})},p},c=l(p||(p=e(["\n  font-family: 'IBM Plex Mono', monospace;\n  font-size: ","px;\n  font-weight: ",";\n"])),(function(s){return s.size||16}),(function(s){return s.weight||400})),r=l(t||(t=e(["\n  font-family: Inter, Helvetica Neue, Helvetica, sans-serif;\n  font-size: ","px;\n  font-weight: ",";\n"])),(function(s){return s.size||16}),(function(s){return s.weight||400}))},1780:function(s,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_app",function(){return a(3906)}])},1664:function(s,n,a){s.exports=a(2167)},4155:function(s){var n,a,e=s.exports={};function p(){throw new Error("setTimeout has not been defined")}function t(){throw new Error("clearTimeout has not been defined")}function l(s){if(n===setTimeout)return setTimeout(s,0);if((n===p||!n)&&setTimeout)return n=setTimeout,setTimeout(s,0);try{return n(s,0)}catch(a){try{return n.call(null,s,0)}catch(a){return n.call(this,s,0)}}}!function(){try{n="function"===typeof setTimeout?setTimeout:p}catch(s){n=p}try{a="function"===typeof clearTimeout?clearTimeout:t}catch(s){a=t}}();var c,r=[],o=!1,i=-1;function u(){o&&c&&(o=!1,c.length?r=c.concat(r):i=-1,r.length&&d())}function d(){if(!o){var s=l(u);o=!0;for(var n=r.length;n;){for(c=r,r=[];++i<n;)c&&c[i].run();i=-1,n=r.length}c=null,o=!1,function(s){if(a===clearTimeout)return clearTimeout(s);if((a===t||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(s);try{a(s)}catch(n){try{return a.call(null,s)}catch(n){return a.call(this,s)}}}(s)}}function f(s,n){this.fun=s,this.array=n}function m(){}e.nextTick=function(s){var n=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)n[a-1]=arguments[a];r.push(new f(s,n)),1!==r.length||o||l(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},e.title="browser",e.browser=!0,e.env={},e.argv=[],e.version="",e.versions={},e.on=m,e.addListener=m,e.once=m,e.off=m,e.removeListener=m,e.removeAllListeners=m,e.emit=m,e.prependListener=m,e.prependOnceListener=m,e.listeners=function(s){return[]},e.binding=function(s){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(s){throw new Error("process.chdir is not supported")},e.umask=function(){return 0}},9921:function(s,n){"use strict";var a="function"===typeof Symbol&&Symbol.for,e=a?Symbol.for("react.element"):60103,p=a?Symbol.for("react.portal"):60106,t=a?Symbol.for("react.fragment"):60107,l=a?Symbol.for("react.strict_mode"):60108,c=a?Symbol.for("react.profiler"):60114,r=a?Symbol.for("react.provider"):60109,o=a?Symbol.for("react.context"):60110,i=a?Symbol.for("react.async_mode"):60111,u=a?Symbol.for("react.concurrent_mode"):60111,d=a?Symbol.for("react.forward_ref"):60112,f=a?Symbol.for("react.suspense"):60113,m=a?Symbol.for("react.suspense_list"):60120,g=a?Symbol.for("react.memo"):60115,h=a?Symbol.for("react.lazy"):60116,b=a?Symbol.for("react.block"):60121,v=a?Symbol.for("react.fundamental"):60117,y=a?Symbol.for("react.responder"):60118,_=a?Symbol.for("react.scope"):60119;function k(s){if("object"===typeof s&&null!==s){var n=s.$$typeof;switch(n){case e:switch(s=s.type){case i:case u:case t:case c:case l:case f:return s;default:switch(s=s&&s.$$typeof){case o:case d:case h:case g:case r:return s;default:return n}}case p:return n}}}function w(s){return k(s)===u}n.AsyncMode=i,n.ConcurrentMode=u,n.ContextConsumer=o,n.ContextProvider=r,n.Element=e,n.ForwardRef=d,n.Fragment=t,n.Lazy=h,n.Memo=g,n.Portal=p,n.Profiler=c,n.StrictMode=l,n.Suspense=f,n.isAsyncMode=function(s){return w(s)||k(s)===i},n.isConcurrentMode=w,n.isContextConsumer=function(s){return k(s)===o},n.isContextProvider=function(s){return k(s)===r},n.isElement=function(s){return"object"===typeof s&&null!==s&&s.$$typeof===e},n.isForwardRef=function(s){return k(s)===d},n.isFragment=function(s){return k(s)===t},n.isLazy=function(s){return k(s)===h},n.isMemo=function(s){return k(s)===g},n.isPortal=function(s){return k(s)===p},n.isProfiler=function(s){return k(s)===c},n.isStrictMode=function(s){return k(s)===l},n.isSuspense=function(s){return k(s)===f},n.isValidElementType=function(s){return"string"===typeof s||"function"===typeof s||s===t||s===u||s===c||s===l||s===f||s===m||"object"===typeof s&&null!==s&&(s.$$typeof===h||s.$$typeof===g||s.$$typeof===r||s.$$typeof===o||s.$$typeof===d||s.$$typeof===v||s.$$typeof===y||s.$$typeof===_||s.$$typeof===b)},n.typeOf=k},9864:function(s,n,a){"use strict";s.exports=a(9921)},6774:function(s){s.exports=function(s,n,a,e){var p=a?a.call(e,s,n):void 0;if(void 0!==p)return!!p;if(s===n)return!0;if("object"!==typeof s||!s||"object"!==typeof n||!n)return!1;var t=Object.keys(s),l=Object.keys(n);if(t.length!==l.length)return!1;for(var c=Object.prototype.hasOwnProperty.bind(n),r=0;r<t.length;r++){var o=t[r];if(!c(o))return!1;var i=s[o],u=n[o];if(!1===(p=a?a.call(e,i,u,o):void 0)||void 0===p&&i!==u)return!1}return!0}},9163:function(s,n,a){"use strict";a.d(n,{vJ:function(){return zs},iv:function(){return ys},ZP:function(){return Ns}});var e=a(9864),p=a(7294),t=a(6774),l=a.n(t);var c=function(s){function n(s,e,r,o,d){for(var f,m,g,h,_,w=0,x=0,S=0,A=0,C=0,P=0,R=g=f=0,N=0,M=0,D=0,$=0,F=r.length,H=F-1,G="",V="",B="",U="";N<F;){if(m=r.charCodeAt(N),N===H&&0!==x+A+S+w&&(0!==x&&(m=47===x?10:47),A=S=w=0,F++,H++),0===x+A+S+w){if(N===H&&(0<M&&(G=G.replace(u,"")),0<G.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:G+=r.charAt(N)}m=59}switch(m){case 123:for(f=(G=G.trim()).charCodeAt(0),g=1,$=++N;N<F;){switch(m=r.charCodeAt(N)){case 123:g++;break;case 125:g--;break;case 47:switch(m=r.charCodeAt(N+1)){case 42:case 47:s:{for(R=N+1;R<H;++R)switch(r.charCodeAt(R)){case 47:if(42===m&&42===r.charCodeAt(R-1)&&N+2!==R){N=R+1;break s}break;case 10:if(47===m){N=R+1;break s}}N=R}}break;case 91:m++;case 40:m++;case 34:case 39:for(;N++<H&&r.charCodeAt(N)!==m;);}if(0===g)break;N++}switch(g=r.substring($,N),0===f&&(f=(G=G.replace(i,"").trim()).charCodeAt(0)),f){case 64:switch(0<M&&(G=G.replace(u,"")),m=G.charCodeAt(1)){case 100:case 109:case 115:case 45:M=e;break;default:M=I}if($=(g=n(e,M,g,m,d+1)).length,0<T&&(_=c(3,g,M=a(I,G,D),e,E,O,$,m,d,o),G=M.join(""),void 0!==_&&0===($=(g=_.trim()).length)&&(m=0,g="")),0<$)switch(m){case 115:G=G.replace(k,l);case 100:case 109:case 45:g=G+"{"+g+"}";break;case 107:g=(G=G.replace(b,"$1 $2"))+"{"+g+"}",g=1===L||2===L&&t("@"+g,3)?"@-webkit-"+g+"@"+g:"@"+g;break;default:g=G+g,112===o&&(V+=g,g="")}else g="";break;default:g=n(e,a(e,G,D),g,o,d+1)}B+=g,g=D=M=R=f=0,G="",m=r.charCodeAt(++N);break;case 125:case 59:if(1<($=(G=(0<M?G.replace(u,""):G).trim()).length))switch(0===R&&(f=G.charCodeAt(0),45===f||96<f&&123>f)&&($=(G=G.replace(" ",":")).length),0<T&&void 0!==(_=c(1,G,e,s,E,O,V.length,o,d,o))&&0===($=(G=_.trim()).length)&&(G="\0\0"),f=G.charCodeAt(0),m=G.charCodeAt(1),f){case 0:break;case 64:if(105===m||99===m){U+=G+r.charAt(N);break}default:58!==G.charCodeAt($-1)&&(V+=p(G,f,m,G.charCodeAt(2)))}D=M=R=f=0,G="",m=r.charCodeAt(++N)}}switch(m){case 13:case 10:47===x?x=0:0===1+f&&107!==o&&0<G.length&&(M=1,G+="\0"),0<T*z&&c(0,G,e,s,E,O,V.length,o,d,o),O=1,E++;break;case 59:case 125:if(0===x+A+S+w){O++;break}default:switch(O++,h=r.charAt(N),m){case 9:case 32:if(0===A+w+x)switch(C){case 44:case 58:case 9:case 32:h="";break;default:32!==m&&(h=" ")}break;case 0:h="\\0";break;case 12:h="\\f";break;case 11:h="\\v";break;case 38:0===A+x+w&&(M=D=1,h="\f"+h);break;case 108:if(0===A+x+w+j&&0<R)switch(N-R){case 2:112===C&&58===r.charCodeAt(N-3)&&(j=C);case 8:111===P&&(j=P)}break;case 58:0===A+x+w&&(R=N);break;case 44:0===x+S+A+w&&(M=1,h+="\r");break;case 34:case 39:0===x&&(A=A===m?0:0===A?m:A);break;case 91:0===A+x+S&&w++;break;case 93:0===A+x+S&&w--;break;case 41:0===A+x+w&&S--;break;case 40:if(0===A+x+w){if(0===f)switch(2*C+3*P){case 533:break;default:f=1}S++}break;case 64:0===x+S+A+w+R+g&&(g=1);break;case 42:case 47:if(!(0<A+w+S))switch(x){case 0:switch(2*m+3*r.charCodeAt(N+1)){case 235:x=47;break;case 220:$=N,x=42}break;case 42:47===m&&42===C&&$+2!==N&&(33===r.charCodeAt($+2)&&(V+=r.substring($,N+1)),h="",x=0)}}0===x&&(G+=h)}P=C,C=m,N++}if(0<($=V.length)){if(M=e,0<T&&(void 0!==(_=c(2,V,M,s,E,O,$,o,d,o))&&0===(V=_).length))return U+V+B;if(V=M.join(",")+"{"+V+"}",0!==L*j){switch(2!==L||t(V,2)||(j=0),j){case 111:V=V.replace(y,":-moz-$1")+V;break;case 112:V=V.replace(v,"::-webkit-input-$1")+V.replace(v,"::-moz-$1")+V.replace(v,":-ms-input-$1")+V}j=0}}return U+V+B}function a(s,n,a){var p=n.trim().split(g);n=p;var t=p.length,l=s.length;switch(l){case 0:case 1:var c=0;for(s=0===l?"":s[0]+" ";c<t;++c)n[c]=e(s,n[c],a).trim();break;default:var r=c=0;for(n=[];c<t;++c)for(var o=0;o<l;++o)n[r++]=e(s[o]+" ",p[c],a).trim()}return n}function e(s,n,a){var e=n.charCodeAt(0);switch(33>e&&(e=(n=n.trim()).charCodeAt(0)),e){case 38:return n.replace(h,"$1"+s.trim());case 58:return s.trim()+n.replace(h,"$1"+s.trim());default:if(0<1*a&&0<n.indexOf("\f"))return n.replace(h,(58===s.charCodeAt(0)?"":"$1")+s.trim())}return s+n}function p(s,n,a,e){var l=s+";",c=2*n+3*a+4*e;if(944===c){s=l.indexOf(":",9)+1;var r=l.substring(s,l.length-1).trim();return r=l.substring(0,s).trim()+r+";",1===L||2===L&&t(r,1)?"-webkit-"+r+r:r}if(0===L||2===L&&!t(l,1))return l;switch(c){case 1015:return 97===l.charCodeAt(10)?"-webkit-"+l+l:l;case 951:return 116===l.charCodeAt(3)?"-webkit-"+l+l:l;case 963:return 110===l.charCodeAt(5)?"-webkit-"+l+l:l;case 1009:if(100!==l.charCodeAt(4))break;case 969:case 942:return"-webkit-"+l+l;case 978:return"-webkit-"+l+"-moz-"+l+l;case 1019:case 983:return"-webkit-"+l+"-moz-"+l+"-ms-"+l+l;case 883:if(45===l.charCodeAt(8))return"-webkit-"+l+l;if(0<l.indexOf("image-set(",11))return l.replace(C,"$1-webkit-$2")+l;break;case 932:if(45===l.charCodeAt(4))switch(l.charCodeAt(5)){case 103:return"-webkit-box-"+l.replace("-grow","")+"-webkit-"+l+"-ms-"+l.replace("grow","positive")+l;case 115:return"-webkit-"+l+"-ms-"+l.replace("shrink","negative")+l;case 98:return"-webkit-"+l+"-ms-"+l.replace("basis","preferred-size")+l}return"-webkit-"+l+"-ms-"+l+l;case 964:return"-webkit-"+l+"-ms-flex-"+l+l;case 1023:if(99!==l.charCodeAt(8))break;return"-webkit-box-pack"+(r=l.substring(l.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+l+"-ms-flex-pack"+r+l;case 1005:return f.test(l)?l.replace(d,":-webkit-")+l.replace(d,":-moz-")+l:l;case 1e3:switch(n=(r=l.substring(13).trim()).indexOf("-")+1,r.charCodeAt(0)+r.charCodeAt(n)){case 226:r=l.replace(_,"tb");break;case 232:r=l.replace(_,"tb-rl");break;case 220:r=l.replace(_,"lr");break;default:return l}return"-webkit-"+l+"-ms-"+r+l;case 1017:if(-1===l.indexOf("sticky",9))break;case 975:switch(n=(l=s).length-10,c=(r=(33===l.charCodeAt(n)?l.substring(0,n):l).substring(s.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|r.charCodeAt(7))){case 203:if(111>r.charCodeAt(8))break;case 115:l=l.replace(r,"-webkit-"+r)+";"+l;break;case 207:case 102:l=l.replace(r,"-webkit-"+(102<c?"inline-":"")+"box")+";"+l.replace(r,"-webkit-"+r)+";"+l.replace(r,"-ms-"+r+"box")+";"+l}return l+";";case 938:if(45===l.charCodeAt(5))switch(l.charCodeAt(6)){case 105:return r=l.replace("-items",""),"-webkit-"+l+"-webkit-box-"+r+"-ms-flex-"+r+l;case 115:return"-webkit-"+l+"-ms-flex-item-"+l.replace(x,"")+l;default:return"-webkit-"+l+"-ms-flex-line-pack"+l.replace("align-content","").replace(x,"")+l}break;case 973:case 989:if(45!==l.charCodeAt(3)||122===l.charCodeAt(4))break;case 931:case 953:if(!0===A.test(s))return 115===(r=s.substring(s.indexOf(":")+1)).charCodeAt(0)?p(s.replace("stretch","fill-available"),n,a,e).replace(":fill-available",":stretch"):l.replace(r,"-webkit-"+r)+l.replace(r,"-moz-"+r.replace("fill-",""))+l;break;case 962:if(l="-webkit-"+l+(102===l.charCodeAt(5)?"-ms-"+l:"")+l,211===a+e&&105===l.charCodeAt(13)&&0<l.indexOf("transform",10))return l.substring(0,l.indexOf(";",27)+1).replace(m,"$1-webkit-$2")+l}return l}function t(s,n){var a=s.indexOf(1===n?":":"{"),e=s.substring(0,3!==n?a:10);return a=s.substring(a+1,s.length-1),R(2!==n?e:e.replace(S,"$1"),a,n)}function l(s,n){var a=p(n,n.charCodeAt(0),n.charCodeAt(1),n.charCodeAt(2));return a!==n+";"?a.replace(w," or ($1)").substring(4):"("+n+")"}function c(s,n,a,e,p,t,l,c,r,i){for(var u,d=0,f=n;d<T;++d)switch(u=P[d].call(o,s,f,a,e,p,t,l,c,r,i)){case void 0:case!1:case!0:case null:break;default:f=u}if(f!==n)return f}function r(s){return void 0!==(s=s.prefix)&&(R=null,s?"function"!==typeof s?L=1:(L=2,R=s):L=0),r}function o(s,a){var e=s;if(33>e.charCodeAt(0)&&(e=e.trim()),e=[e],0<T){var p=c(-1,a,e,e,E,O,0,0,0,0);void 0!==p&&"string"===typeof p&&(a=p)}var t=n(I,e,a,0,0);return 0<T&&(void 0!==(p=c(-2,t,e,e,E,O,t.length,0,0,0))&&(t=p)),"",j=0,O=E=1,t}var i=/^\0+/g,u=/[\0\r\f]/g,d=/: */g,f=/zoo|gra/,m=/([,: ])(transform)/g,g=/,\r+?/g,h=/([\t\r\n ])*\f?&/g,b=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,y=/:(read-only)/g,_=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,x=/-self|flex-/g,S=/[^]*?(:[rp][el]a[\w-]+)[^]*/,A=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,O=1,E=1,j=0,L=1,I=[],P=[],T=0,R=null,z=0;return o.use=function s(n){switch(n){case void 0:case null:T=P.length=0;break;default:if("function"===typeof n)P[T++]=n;else if("object"===typeof n)for(var a=0,e=n.length;a<e;++a)s(n[a]);else z=0|!!n}return s},o.set=r,void 0!==s&&r(s),o},r={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var o=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,i=function(s){var n={};return function(a){return void 0===n[a]&&(n[a]=s(a)),n[a]}}((function(s){return o.test(s)||111===s.charCodeAt(0)&&110===s.charCodeAt(1)&&s.charCodeAt(2)<91})),u=a(8679),d=a.n(u),f=a(4155);function m(){return(m=Object.assign||function(s){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(s[e]=a[e])}return s}).apply(this,arguments)}var g=function(s,n){for(var a=[s[0]],e=0,p=n.length;e<p;e+=1)a.push(n[e],s[e+1]);return a},h=function(s){return null!==s&&"object"==typeof s&&"[object Object]"===(s.toString?s.toString():Object.prototype.toString.call(s))&&!(0,e.typeOf)(s)},b=Object.freeze([]),v=Object.freeze({});function y(s){return"function"==typeof s}function _(s){return s.displayName||s.name||"Component"}function k(s){return s&&"string"==typeof s.styledComponentId}var w="undefined"!=typeof f&&(f.env.REACT_APP_SC_ATTR||f.env.SC_ATTR)||"data-styled",x="undefined"!=typeof window&&"HTMLElement"in window,S=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof f&&void 0!==f.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==f.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==f.env.REACT_APP_SC_DISABLE_SPEEDY&&f.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof f&&void 0!==f.env.SC_DISABLE_SPEEDY&&""!==f.env.SC_DISABLE_SPEEDY&&("false"!==f.env.SC_DISABLE_SPEEDY&&f.env.SC_DISABLE_SPEEDY)),A={};function C(s){for(var n=arguments.length,a=new Array(n>1?n-1:0),e=1;e<n;e++)a[e-1]=arguments[e];throw new Error("An error occurred. See https://git.io/JUIaE#"+s+" for more information."+(a.length>0?" Args: "+a.join(", "):""))}var O=function(){function s(s){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=s}var n=s.prototype;return n.indexOfGroup=function(s){for(var n=0,a=0;a<s;a++)n+=this.groupSizes[a];return n},n.insertRules=function(s,n){if(s>=this.groupSizes.length){for(var a=this.groupSizes,e=a.length,p=e;s>=p;)(p<<=1)<0&&C(16,""+s);this.groupSizes=new Uint32Array(p),this.groupSizes.set(a),this.length=p;for(var t=e;t<p;t++)this.groupSizes[t]=0}for(var l=this.indexOfGroup(s+1),c=0,r=n.length;c<r;c++)this.tag.insertRule(l,n[c])&&(this.groupSizes[s]++,l++)},n.clearGroup=function(s){if(s<this.length){var n=this.groupSizes[s],a=this.indexOfGroup(s),e=a+n;this.groupSizes[s]=0;for(var p=a;p<e;p++)this.tag.deleteRule(a)}},n.getGroup=function(s){var n="";if(s>=this.length||0===this.groupSizes[s])return n;for(var a=this.groupSizes[s],e=this.indexOfGroup(s),p=e+a,t=e;t<p;t++)n+=this.tag.getRule(t)+"/*!sc*/\n";return n},s}(),E=new Map,j=new Map,L=1,I=function(s){if(E.has(s))return E.get(s);for(;j.has(L);)L++;var n=L++;return E.set(s,n),j.set(n,s),n},P=function(s){return j.get(s)},T=function(s,n){n>=L&&(L=n+1),E.set(s,n),j.set(n,s)},R="style["+w+'][data-styled-version="5.3.1"]',z=new RegExp("^"+w+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),N=function(s,n,a){for(var e,p=a.split(","),t=0,l=p.length;t<l;t++)(e=p[t])&&s.registerName(n,e)},M=function(s,n){for(var a=(n.innerHTML||"").split("/*!sc*/\n"),e=[],p=0,t=a.length;p<t;p++){var l=a[p].trim();if(l){var c=l.match(z);if(c){var r=0|parseInt(c[1],10),o=c[2];0!==r&&(T(o,r),N(s,o,c[3]),s.getTag().insertRules(r,e)),e.length=0}else e.push(l)}}},D=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},$=function(s){var n=document.head,a=s||n,e=document.createElement("style"),p=function(s){for(var n=s.childNodes,a=n.length;a>=0;a--){var e=n[a];if(e&&1===e.nodeType&&e.hasAttribute(w))return e}}(a),t=void 0!==p?p.nextSibling:null;e.setAttribute(w,"active"),e.setAttribute("data-styled-version","5.3.1");var l=D();return l&&e.setAttribute("nonce",l),a.insertBefore(e,t),e},F=function(){function s(s){var n=this.element=$(s);n.appendChild(document.createTextNode("")),this.sheet=function(s){if(s.sheet)return s.sheet;for(var n=document.styleSheets,a=0,e=n.length;a<e;a++){var p=n[a];if(p.ownerNode===s)return p}C(17)}(n),this.length=0}var n=s.prototype;return n.insertRule=function(s,n){try{return this.sheet.insertRule(n,s),this.length++,!0}catch(s){return!1}},n.deleteRule=function(s){this.sheet.deleteRule(s),this.length--},n.getRule=function(s){var n=this.sheet.cssRules[s];return void 0!==n&&"string"==typeof n.cssText?n.cssText:""},s}(),H=function(){function s(s){var n=this.element=$(s);this.nodes=n.childNodes,this.length=0}var n=s.prototype;return n.insertRule=function(s,n){if(s<=this.length&&s>=0){var a=document.createTextNode(n),e=this.nodes[s];return this.element.insertBefore(a,e||null),this.length++,!0}return!1},n.deleteRule=function(s){this.element.removeChild(this.nodes[s]),this.length--},n.getRule=function(s){return s<this.length?this.nodes[s].textContent:""},s}(),G=function(){function s(s){this.rules=[],this.length=0}var n=s.prototype;return n.insertRule=function(s,n){return s<=this.length&&(this.rules.splice(s,0,n),this.length++,!0)},n.deleteRule=function(s){this.rules.splice(s,1),this.length--},n.getRule=function(s){return s<this.length?this.rules[s]:""},s}(),V=x,B={isServer:!x,useCSSOMInjection:!S},U=function(){function s(s,n,a){void 0===s&&(s=v),void 0===n&&(n={}),this.options=m({},B,{},s),this.gs=n,this.names=new Map(a),this.server=!!s.isServer,!this.server&&x&&V&&(V=!1,function(s){for(var n=document.querySelectorAll(R),a=0,e=n.length;a<e;a++){var p=n[a];p&&"active"!==p.getAttribute(w)&&(M(s,p),p.parentNode&&p.parentNode.removeChild(p))}}(this))}s.registerId=function(s){return I(s)};var n=s.prototype;return n.reconstructWithOptions=function(n,a){return void 0===a&&(a=!0),new s(m({},this.options,{},n),this.gs,a&&this.names||void 0)},n.allocateGSInstance=function(s){return this.gs[s]=(this.gs[s]||0)+1},n.getTag=function(){return this.tag||(this.tag=(a=(n=this.options).isServer,e=n.useCSSOMInjection,p=n.target,s=a?new G(p):e?new F(p):new H(p),new O(s)));var s,n,a,e,p},n.hasNameForId=function(s,n){return this.names.has(s)&&this.names.get(s).has(n)},n.registerName=function(s,n){if(I(s),this.names.has(s))this.names.get(s).add(n);else{var a=new Set;a.add(n),this.names.set(s,a)}},n.insertRules=function(s,n,a){this.registerName(s,n),this.getTag().insertRules(I(s),a)},n.clearNames=function(s){this.names.has(s)&&this.names.get(s).clear()},n.clearRules=function(s){this.getTag().clearGroup(I(s)),this.clearNames(s)},n.clearTag=function(){this.tag=void 0},n.toString=function(){return function(s){for(var n=s.getTag(),a=n.length,e="",p=0;p<a;p++){var t=P(p);if(void 0!==t){var l=s.names.get(t),c=n.getGroup(p);if(l&&c&&l.size){var r=w+".g"+p+'[id="'+t+'"]',o="";void 0!==l&&l.forEach((function(s){s.length>0&&(o+=s+",")})),e+=""+c+r+'{content:"'+o+'"}/*!sc*/\n'}}}return e}(this)},s}(),W=/(a)(d)/gi,q=function(s){return String.fromCharCode(s+(s>25?39:97))};function Z(s){var n,a="";for(n=Math.abs(s);n>52;n=n/52|0)a=q(n%52)+a;return(q(n%52)+a).replace(W,"$1-$2")}var Y=function(s,n){for(var a=n.length;a;)s=33*s^n.charCodeAt(--a);return s},K=function(s){return Y(5381,s)};function J(s){for(var n=0;n<s.length;n+=1){var a=s[n];if(y(a)&&!k(a))return!1}return!0}var X=K("5.3.1"),Q=function(){function s(s,n,a){this.rules=s,this.staticRulesId="",this.isStatic=(void 0===a||a.isStatic)&&J(s),this.componentId=n,this.baseHash=Y(X,n),this.baseStyle=a,U.registerId(n)}return s.prototype.generateAndInjectStyles=function(s,n,a){var e=this.componentId,p=[];if(this.baseStyle&&p.push(this.baseStyle.generateAndInjectStyles(s,n,a)),this.isStatic&&!a.hash)if(this.staticRulesId&&n.hasNameForId(e,this.staticRulesId))p.push(this.staticRulesId);else{var t=bs(this.rules,s,n,a).join(""),l=Z(Y(this.baseHash,t)>>>0);if(!n.hasNameForId(e,l)){var c=a(t,"."+l,void 0,e);n.insertRules(e,l,c)}p.push(l),this.staticRulesId=l}else{for(var r=this.rules.length,o=Y(this.baseHash,a.hash),i="",u=0;u<r;u++){var d=this.rules[u];if("string"==typeof d)i+=d;else if(d){var f=bs(d,s,n,a),m=Array.isArray(f)?f.join(""):f;o=Y(o,m+u),i+=m}}if(i){var g=Z(o>>>0);if(!n.hasNameForId(e,g)){var h=a(i,"."+g,void 0,e);n.insertRules(e,g,h)}p.push(g)}}return p.join(" ")},s}(),ss=/^\s*\/\/.*$/gm,ns=[":","[",".","#"];function as(s){var n,a,e,p,t=void 0===s?v:s,l=t.options,r=void 0===l?v:l,o=t.plugins,i=void 0===o?b:o,u=new c(r),d=[],f=function(s){function n(n){if(n)try{s(n+"}")}catch(s){}}return function(a,e,p,t,l,c,r,o,i,u){switch(a){case 1:if(0===i&&64===e.charCodeAt(0))return s(e+";"),"";break;case 2:if(0===o)return e+"/*|*/";break;case 3:switch(o){case 102:case 112:return s(p[0]+e),"";default:return e+(0===u?"/*|*/":"")}case-2:e.split("/*|*/}").forEach(n)}}}((function(s){d.push(s)})),m=function(s,e,t){return 0===e&&-1!==ns.indexOf(t[a.length])||t.match(p)?s:"."+n};function g(s,t,l,c){void 0===c&&(c="&");var r=s.replace(ss,""),o=t&&l?l+" "+t+" { "+r+" }":r;return n=c,a=t,e=new RegExp("\\"+a+"\\b","g"),p=new RegExp("(\\"+a+"\\b){2,}"),u(l||!t?"":t,o)}return u.use([].concat(i,[function(s,n,p){2===s&&p.length&&p[0].lastIndexOf(a)>0&&(p[0]=p[0].replace(e,m))},f,function(s){if(-2===s){var n=d;return d=[],n}}])),g.hash=i.length?i.reduce((function(s,n){return n.name||C(15),Y(s,n.name)}),5381).toString():"",g}var es=p.createContext(),ps=(es.Consumer,p.createContext()),ts=(ps.Consumer,new U),ls=as();function cs(){return(0,p.useContext)(es)||ts}function rs(){return(0,p.useContext)(ps)||ls}function os(s){var n=(0,p.useState)(s.stylisPlugins),a=n[0],e=n[1],t=cs(),c=(0,p.useMemo)((function(){var n=t;return s.sheet?n=s.sheet:s.target&&(n=n.reconstructWithOptions({target:s.target},!1)),s.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[s.disableCSSOMInjection,s.sheet,s.target]),r=(0,p.useMemo)((function(){return as({options:{prefix:!s.disableVendorPrefixes},plugins:a})}),[s.disableVendorPrefixes,a]);return(0,p.useEffect)((function(){l()(a,s.stylisPlugins)||e(s.stylisPlugins)}),[s.stylisPlugins]),p.createElement(es.Provider,{value:c},p.createElement(ps.Provider,{value:r},s.children))}var is=function(){function s(s,n){var a=this;this.inject=function(s,n){void 0===n&&(n=ls);var e=a.name+n.hash;s.hasNameForId(a.id,e)||s.insertRules(a.id,e,n(a.rules,e,"@keyframes"))},this.toString=function(){return C(12,String(a.name))},this.name=s,this.id="sc-keyframes-"+s,this.rules=n}return s.prototype.getName=function(s){return void 0===s&&(s=ls),this.name+s.hash},s}(),us=/([A-Z])/,ds=/([A-Z])/g,fs=/^ms-/,ms=function(s){return"-"+s.toLowerCase()};function gs(s){return us.test(s)?s.replace(ds,ms).replace(fs,"-ms-"):s}var hs=function(s){return null==s||!1===s||""===s};function bs(s,n,a,e){if(Array.isArray(s)){for(var p,t=[],l=0,c=s.length;l<c;l+=1)""!==(p=bs(s[l],n,a,e))&&(Array.isArray(p)?t.push.apply(t,p):t.push(p));return t}return hs(s)?"":k(s)?"."+s.styledComponentId:y(s)?"function"!=typeof(o=s)||o.prototype&&o.prototype.isReactComponent||!n?s:bs(s(n),n,a,e):s instanceof is?a?(s.inject(a,e),s.getName(e)):s:h(s)?function s(n,a){var e,p,t=[];for(var l in n)n.hasOwnProperty(l)&&!hs(n[l])&&(Array.isArray(n[l])&&n[l].isCss||y(n[l])?t.push(gs(l)+":",n[l],";"):h(n[l])?t.push.apply(t,s(n[l],l)):t.push(gs(l)+": "+(e=l,(null==(p=n[l])||"boolean"==typeof p||""===p?"":"number"!=typeof p||0===p||e in r?String(p).trim():p+"px")+";")));return a?[a+" {"].concat(t,["}"]):t}(s):s.toString();var o}var vs=function(s){return Array.isArray(s)&&(s.isCss=!0),s};function ys(s){for(var n=arguments.length,a=new Array(n>1?n-1:0),e=1;e<n;e++)a[e-1]=arguments[e];return y(s)||h(s)?vs(bs(g(b,[s].concat(a)))):0===a.length&&1===s.length&&"string"==typeof s[0]?s:vs(bs(g(s,a)))}new Set;var _s=function(s,n,a){return void 0===a&&(a=v),s.theme!==a.theme&&s.theme||n||a.theme},ks=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ws=/(^-|-$)/g;function xs(s){return s.replace(ks,"-").replace(ws,"")}var Ss=function(s){return Z(K(s)>>>0)};function As(s){return"string"==typeof s&&!0}var Cs=function(s){return"function"==typeof s||"object"==typeof s&&null!==s&&!Array.isArray(s)},Os=function(s){return"__proto__"!==s&&"constructor"!==s&&"prototype"!==s};function Es(s,n,a){var e=s[a];Cs(n)&&Cs(e)?js(e,n):s[a]=n}function js(s){for(var n=arguments.length,a=new Array(n>1?n-1:0),e=1;e<n;e++)a[e-1]=arguments[e];for(var p=0,t=a;p<t.length;p++){var l=t[p];if(Cs(l))for(var c in l)Os(c)&&Es(s,l[c],c)}return s}var Ls=p.createContext();Ls.Consumer;var Is={};function Ps(s,n,a){var e=k(s),t=!As(s),l=n.attrs,c=void 0===l?b:l,r=n.componentId,o=void 0===r?function(s,n){var a="string"!=typeof s?"sc":xs(s);Is[a]=(Is[a]||0)+1;var e=a+"-"+Ss("5.3.1"+a+Is[a]);return n?n+"-"+e:e}(n.displayName,n.parentComponentId):r,u=n.displayName,f=void 0===u?function(s){return As(s)?"styled."+s:"Styled("+_(s)+")"}(s):u,g=n.displayName&&n.componentId?xs(n.displayName)+"-"+n.componentId:n.componentId||o,h=e&&s.attrs?Array.prototype.concat(s.attrs,c).filter(Boolean):c,w=n.shouldForwardProp;e&&s.shouldForwardProp&&(w=n.shouldForwardProp?function(a,e,p){return s.shouldForwardProp(a,e,p)&&n.shouldForwardProp(a,e,p)}:s.shouldForwardProp);var x,S=new Q(a,g,e?s.componentStyle:void 0),A=S.isStatic&&0===c.length,C=function(s,n){return function(s,n,a,e){var t=s.attrs,l=s.componentStyle,c=s.defaultProps,r=s.foldedComponentIds,o=s.shouldForwardProp,u=s.styledComponentId,d=s.target,f=function(s,n,a){void 0===s&&(s=v);var e=m({},n,{theme:s}),p={};return a.forEach((function(s){var n,a,t,l=s;for(n in y(l)&&(l=l(e)),l)e[n]=p[n]="className"===n?(a=p[n],t=l[n],a&&t?a+" "+t:a||t):l[n]})),[e,p]}(_s(n,(0,p.useContext)(Ls),c)||v,n,t),g=f[0],h=f[1],b=function(s,n,a,e){var p=cs(),t=rs();return n?s.generateAndInjectStyles(v,p,t):s.generateAndInjectStyles(a,p,t)}(l,e,g),_=a,k=h.$as||n.$as||h.as||n.as||d,w=As(k),x=h!==n?m({},n,{},h):n,S={};for(var A in x)"$"!==A[0]&&"as"!==A&&("forwardedAs"===A?S.as=x[A]:(o?o(A,i,k):!w||i(A))&&(S[A]=x[A]));return n.style&&h.style!==n.style&&(S.style=m({},n.style,{},h.style)),S.className=Array.prototype.concat(r,u,b!==u?b:null,n.className,h.className).filter(Boolean).join(" "),S.ref=_,(0,p.createElement)(k,S)}(x,s,n,A)};return C.displayName=f,(x=p.forwardRef(C)).attrs=h,x.componentStyle=S,x.displayName=f,x.shouldForwardProp=w,x.foldedComponentIds=e?Array.prototype.concat(s.foldedComponentIds,s.styledComponentId):b,x.styledComponentId=g,x.target=e?s.target:s,x.withComponent=function(s){var e=n.componentId,p=function(s,n){if(null==s)return{};var a,e,p={},t=Object.keys(s);for(e=0;e<t.length;e++)a=t[e],n.indexOf(a)>=0||(p[a]=s[a]);return p}(n,["componentId"]),t=e&&e+"-"+(As(s)?s:xs(_(s)));return Ps(s,m({},p,{attrs:h,componentId:t}),a)},Object.defineProperty(x,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(n){this._foldedDefaultProps=e?js({},s.defaultProps,n):n}}),x.toString=function(){return"."+x.styledComponentId},t&&d()(x,s,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),x}var Ts=function(s){return function s(n,a,p){if(void 0===p&&(p=v),!(0,e.isValidElementType)(a))return C(1,String(a));var t=function(){return n(a,p,ys.apply(void 0,arguments))};return t.withConfig=function(e){return s(n,a,m({},p,{},e))},t.attrs=function(e){return s(n,a,m({},p,{attrs:Array.prototype.concat(p.attrs,e).filter(Boolean)}))},t}(Ps,s)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(s){Ts[s]=Ts(s)}));var Rs=function(){function s(s,n){this.rules=s,this.componentId=n,this.isStatic=J(s),U.registerId(this.componentId+1)}var n=s.prototype;return n.createStyles=function(s,n,a,e){var p=e(bs(this.rules,n,a,e).join(""),""),t=this.componentId+s;a.insertRules(t,t,p)},n.removeStyles=function(s,n){n.clearRules(this.componentId+s)},n.renderStyles=function(s,n,a,e){s>2&&U.registerId(this.componentId+s),this.removeStyles(s,a),this.createStyles(s,n,a,e)},s}();function zs(s){for(var n=arguments.length,a=new Array(n>1?n-1:0),e=1;e<n;e++)a[e-1]=arguments[e];var t=ys.apply(void 0,[s].concat(a)),l="sc-global-"+Ss(JSON.stringify(t)),c=new Rs(t,l);function r(s){var n=cs(),a=rs(),e=(0,p.useContext)(Ls),t=(0,p.useRef)(n.allocateGSInstance(l)).current;return n.server&&o(t,s,n,e,a),(0,p.useLayoutEffect)((function(){if(!n.server)return o(t,s,n,e,a),function(){return c.removeStyles(t,n)}}),[t,s,n,e,a]),null}function o(s,n,a,e,p){if(c.isStatic)c.renderStyles(s,A,a,p);else{var t=m({},n,{theme:_s(n,e,r.defaultProps)});c.renderStyles(s,t,a,p)}}return p.memo(r)}!function(){function s(){var s=this;this._emitSheetCSS=function(){var n=s.instance.toString();if(!n)return"";var a=D();return"<style "+[a&&'nonce="'+a+'"',w+'="true"','data-styled-version="5.3.1"'].filter(Boolean).join(" ")+">"+n+"</style>"},this.getStyleTags=function(){return s.sealed?C(2):s._emitSheetCSS()},this.getStyleElement=function(){var n;if(s.sealed)return C(2);var a=((n={})[w]="",n["data-styled-version"]="5.3.1",n.dangerouslySetInnerHTML={__html:s.instance.toString()},n),e=D();return e&&(a.nonce=e),[p.createElement("style",m({},a,{key:"sc-0-0"}))]},this.seal=function(){s.sealed=!0},this.instance=new U({isServer:!0}),this.sealed=!1}var n=s.prototype;n.collectStyles=function(s){return this.sealed?C(2):p.createElement(os,{sheet:this.instance},s)},n.interleaveWithNodeStream=function(s){return C(3)}}();var Ns=Ts},2809:function(s,n,a){"use strict";function e(s,n,a){return n in s?Object.defineProperty(s,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):s[n]=a,s}a.d(n,{Z:function(){return e}})},1508:function(s,n,a){"use strict";function e(s,n){(null==n||n>s.length)&&(n=s.length);for(var a=0,e=new Array(n);a<n;a++)e[a]=s[a];return e}function p(s){return function(s){if(Array.isArray(s))return e(s)}(s)||function(s){if("undefined"!==typeof Symbol&&null!=s[Symbol.iterator]||null!=s["@@iterator"])return Array.from(s)}(s)||function(s,n){if(s){if("string"===typeof s)return e(s,n);var a=Object.prototype.toString.call(s).slice(8,-1);return"Object"===a&&s.constructor&&(a=s.constructor.name),"Map"===a||"Set"===a?Array.from(s):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?e(s,n):void 0}}(s)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}a.d(n,{Z:function(){return p}})}},function(s){var n=function(n){return s(s.s=n)};s.O(0,[774,179],(function(){return n(1780),n(4651)}));var a=s.O();_N_E=a}]);